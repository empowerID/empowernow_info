---
/**
 Local-first accessible video component.

 Props:
  - src: string | { mp4?: string; webm?: string }
  - poster?: string
  - aspect?: string (e.g., '16/9')
  - autoPlay?: boolean (autoplay will be forced muted + playsInline)
  - controls?: boolean (default true)
  - loop?: boolean
  - muted?: boolean
  - playsInline?: boolean (default true)
  - defer?: boolean (click-to-load poster -> video)
  - captions?: Array<{ src: string; srclang: string; label: string; default?: boolean }>
  - class?: string; style?: string
  - title?: string (aria-label fallback)
*/
interface SourceMap { mp4?: string; webm?: string }
interface Track { src: string; srclang: string; label: string; default?: boolean }
interface Props {
  src: string | SourceMap;
  poster?: string;
  aspect?: string;
  autoPlay?: boolean;
  controls?: boolean;
  loop?: boolean;
  muted?: boolean;
  playsInline?: boolean;
  defer?: boolean;
  mode?: 'inline' | 'modal';
  captions?: Array<Track>;
  class?: string;
  style?: string;
  title?: string;
}
const p = Astro.props as Props;
const aspect = p.aspect || '16/9';
const cls = p.class || '';
const st = p.style || '';
const playsInline = p.playsInline !== false;
const controls = p.controls !== false;
const autoplay = !!p.autoPlay;
// Respect explicit muted prop; for inline mode, default to muted if autoplay
const muted = p.muted !== undefined ? p.muted : (p.mode === 'inline' && autoplay);
const aria = p.title ? undefined : 'Video content';
const mode = p.mode || 'modal';

function isMap(x: unknown): x is SourceMap { return typeof x === 'object' && x !== null && ('mp4' in (x as any) || 'webm' in (x as any)); }
const sources = isMap(p.src) ? p.src : ({ mp4: p.src } as SourceMap);
---
<figure class={`mv-wrap ${cls}`} style={`--mv-aspect:${aspect};${st}`}>
  {mode === 'modal' ? (
    <button
      class="mv-defer"
      type="button"
      aria-label={p.title ? `Play: ${p.title}` : 'Play video'}
      data-mp4={sources.mp4}
      data-webm={sources.webm}
      data-autoplay={autoplay ? '1' : '0'}
      data-muted={muted ? '1' : '0'}
      data-poster={p.poster}
      data-title={p.title}
      onclick="window.__mvOpen && window.__mvOpen(this)"
    >
      {p.poster ? (
        <img src={p.poster} alt="" loading="lazy" />
      ) : (
        <div class="mv-ph" aria-hidden="true">
          {p.title && <span class="mv-title">{p.title}</span>}
        </div>
      )}
      <span class="mv-play" aria-hidden="true">▶</span>
    </button>
  ) : p.defer ? (
    <button
      class="mv-defer"
      type="button"
      aria-label={p.title ? `Play: ${p.title}` : 'Play video'}
      data-mp4={sources.mp4}
      data-webm={sources.webm}
      data-autoplay={autoplay ? '1' : '0'}
      data-muted={muted ? '1' : '0'}
      data-poster={p.poster}
      data-title={p.title}
      onclick="(function(btn){var ds=btn.dataset;var wrap=btn.closest('.mv-wrap');if(!wrap)return;var v=document.createElement('video');v.setAttribute('playsinline','');v.setAttribute('controls','');if(ds.poster)v.setAttribute('poster',ds.poster);if(ds.autoplay==='1'){v.setAttribute('autoplay','');v.muted=true;}if(ds.muted==='1'){v.muted=true;}if(ds.webm){var s=document.createElement('source');s.src=ds.webm;s.type='video/webm';v.appendChild(s);}if(ds.mp4){var s2=document.createElement('source');s2.src=ds.mp4;s2.type='video/mp4';v.appendChild(s2);}wrap.replaceChildren(v);})(this)"
    >
      {p.poster ? (
        <img src={p.poster} alt="" loading="lazy" />
      ) : (
        <div class="mv-ph" aria-hidden="true">
          {p.title && <span class="mv-title">{p.title}</span>}
        </div>
      )}
      <span class="mv-play" aria-hidden="true">▶</span>
    </button>
  ) : (
    <video
      poster={p.poster}
      autoplay={autoplay}
      muted={muted}
      loop={p.loop}
      playsinline={playsInline}
      controls={controls}
      aria-label={p.title || aria}
    >
      {sources.webm && <source src={sources.webm} type="video/webm" />}
      {sources.mp4 && <source src={sources.mp4} type="video/mp4" />}
      {p.captions && p.captions.map(t => <track kind="captions" src={t.src} srclang={t.srclang} label={t.label} default={t.default} />)}
    </video>
  )}
  {Astro.slots.has('caption') && <figcaption><slot name="caption" /></figcaption>}
</figure>

<dialog class="mv-dialog" aria-label={p.title || 'Video player'}></dialog>

<script>
  if (!window.__mvOpen) {
    window.__mvOpen = function(btn){
      var ds = btn.dataset;
      var root = btn.closest('.mv-wrap');
      if (!root) return;
      var dlg = root.nextElementSibling;
      if (!(dlg && dlg.tagName === 'DIALOG')) return;
      // Build video
      dlg.innerHTML = '';
      var frame = document.createElement('div');
      frame.className = 'mv-frame';
      var close = document.createElement('button');
      close.className = 'mv-close';
      close.type = 'button';
      close.setAttribute('aria-label','Close');
      close.textContent = '×';
      var video = document.createElement('video');
      video.setAttribute('playsinline','');
      video.setAttribute('controls','');
      if (ds.poster) video.setAttribute('poster', ds.poster);
      // Set muted state
      var shouldMute = ds.muted === '1';
      var shouldAutoplay = ds.autoplay === '1';
      video.muted = shouldMute;
      // Don't set autoplay attribute - we'll play programmatically
      if (ds.webm) { var s = document.createElement('source'); s.src = ds.webm; s.type = 'video/webm'; video.appendChild(s); }
      if (ds.mp4) { var s2 = document.createElement('source'); s2.src = ds.mp4; s2.type = 'video/mp4'; video.appendChild(s2); }
      frame.appendChild(close);
      frame.appendChild(video);
      dlg.appendChild(frame);
      dlg.addEventListener('cancel', function(ev){ ev.preventDefault(); __mvClose(dlg); });
      close.addEventListener('click', function(){ __mvClose(dlg); });
      dlg.addEventListener('click', function(e){ if (e.target === dlg) { __mvClose(dlg); } });
      document.documentElement.style.overflow = 'hidden';
      dlg.showModal();
      // For user-initiated playback (click to open), we can play with sound
      if (shouldAutoplay) {
        // Small delay to ensure video is ready
        setTimeout(function(){
          video.play().catch(function(err){ 
            console.log('Video autoplay:', err.message);
            // If autoplay fails, controls are visible for user to click play
          });
        }, 100);
      }
      close.focus();
    };
    window.__mvClose = function(dlg){
      try { dlg.close(); } catch {}
      dlg.innerHTML = '';
      document.documentElement.style.overflow = '';
    };
  }
</script>

<style>
  /* Scoped styles for the video wrapper and trigger button */
  .mv-wrap{position:relative;display:block;width:100%;max-width:100%;aspect-ratio:var(--mv-aspect);overflow:hidden}
  .mv-wrap>video,.mv-wrap>.mv-defer{position:absolute;inset:0;width:100%;max-width:100%;height:100%;border:0;border-radius:12px;background:var(--surface-2);object-fit:cover}
  .mv-defer{position:absolute;padding:0;cursor:pointer;border:1px solid var(--border-soft);overflow:hidden}
  .mv-defer img{width:100%;height:100%;object-fit:cover;display:block;filter:brightness(.9)}
  .mv-ph{position:absolute;inset:0;display:flex;align-items:flex-end;justify-content:flex-start;padding:18px;background:
      radial-gradient(120% 120% at -10% -10%, rgba(0,231,246,.12) 0%, rgba(0,231,246,0) 60%),
      radial-gradient(120% 120% at 110% 110%, rgba(124,77,255,.12) 0%, rgba(124,77,255,0) 60%),
      linear-gradient(180deg, rgba(255,255,255,.04), rgba(0,0,0,.08));
    color:#d7deea}
  .mv-title{display:inline-block;max-width:92%;font-weight:600;font-size:16px;line-height:1.2;text-shadow:0 2px 10px rgba(0,0,0,.45)}
  .mv-play{
    position:absolute;
    left:50%;
    top:50%;
    transform:translate(-50%,-50%);
    display:inline-grid;
    place-items:center;
    width:80px;
    height:80px;
    border-radius:999px;
    background:linear-gradient(135deg, rgba(0, 231, 246, 0.2) 0%, rgba(108, 76, 255, 0.2) 100%), rgba(10, 15, 30, 0.85);
    backdrop-filter:blur(10px);
    box-shadow:0 10px 40px rgba(0,0,0,.7), 0 0 0 1px rgba(0,231,246,.4), inset 0 1px 0 rgba(255,255,255,.15);
    color:#00e7f6;
    font-size:32px;
    border:2px solid rgba(0,231,246,.5);
    transition:all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    animation:mvPlayPulse 3s ease-in-out infinite;
  }
  .mv-defer:hover .mv-play{
    transform:translate(-50%,-50%) scale(1.15);
    background:linear-gradient(135deg, rgba(0, 231, 246, 0.3) 0%, rgba(108, 76, 255, 0.3) 100%), rgba(10, 15, 30, 0.95);
    border-color:rgba(0,231,246,.9);
    box-shadow:0 15px 50px rgba(0,231,246,.5), 0 0 0 1px rgba(0,231,246,.8), 0 0 30px rgba(0,231,246,.4), inset 0 1px 0 rgba(255,255,255,.25);
    color:#fff;
    animation:mvPlayPulse 1.5s ease-in-out infinite;
  }
  .mv-defer:active .mv-play{
    transform:translate(-50%,-50%) scale(1.05);
  }
  @keyframes mvPlayPulse{
    0%,100%{box-shadow:0 10px 40px rgba(0,0,0,.7), 0 0 0 1px rgba(0,231,246,.4), 0 0 0 0 rgba(0,231,246,.4), inset 0 1px 0 rgba(255,255,255,.15)}
    50%{box-shadow:0 10px 40px rgba(0,0,0,.7), 0 0 0 1px rgba(0,231,246,.6), 0 0 0 12px rgba(0,231,246,0), inset 0 1px 0 rgba(255,255,255,.15)}
  }
  .mv-defer:focus-visible{outline:3px solid var(--color-accent);outline-offset:2px}
  figcaption{color:var(--on-muted);font-size:13px;margin-top:6px}
</style>

<style is:global>
  /* Global styles for dynamically created dialog elements */
  .mv-dialog{
    padding:0;
    border:0;
    background:transparent;
    max-width:100vw;
    max-height:100vh;
    z-index:999999;
  }
  .mv-dialog::backdrop{
    background:rgba(0,0,0,.85);
    backdrop-filter:blur(8px);
    animation:fadeIn 0.3s ease-out;
    z-index:999998;
  }
  .mv-frame{
    position:fixed;
    left:50%;
    top:50%;
    transform:translate(-50%,-50%);
    width:min(1200px,94vw);
    height:min(675px,53vw);
    border-radius:16px;
    overflow:visible;
    box-shadow:0 25px 80px rgba(0,0,0,.7), 0 0 0 1px rgba(0,231,246,.15);
    animation:scaleIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    z-index:10;
  }
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  @keyframes scaleIn {
    from { transform: translate(-50%,-50%) scale(0.9); opacity: 0; }
    to { transform: translate(-50%,-50%) scale(1); opacity: 1; }
  }
  @keyframes pulse {
    0%, 100% { box-shadow: 0 0 0 0 rgba(0,231,246,.7); }
    50% { box-shadow: 0 0 0 8px rgba(0,231,246,0); }
  }
  .mv-frame>video{
    width:100%;
    height:100%;
    display:block;
    background:#000;
    object-fit:contain;
    border-radius:16px;
    z-index:1;
    pointer-events:auto;
  }
  .mv-close{
    position:absolute;
    right:-16px;
    top:-16px;
    width:48px;
    height:48px;
    border-radius:999px;
    border:2px solid rgba(0,231,246,.5);
    background:
      linear-gradient(135deg, rgba(0,231,246,.2) 0%, rgba(108,76,255,.2) 100%),
      rgba(10, 15, 30, 0.85);
    backdrop-filter:blur(10px);
    color:#00e7f6;
    font-size:28px;
    line-height:1;
    cursor:pointer;
    display:grid;
    place-items:center;
    transition:all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    box-shadow:0 8px 24px rgba(0,0,0,.7), 0 0 0 1px rgba(0,231,246,.4), inset 0 1px 0 rgba(255,255,255,.15);
    z-index:100;
    pointer-events:auto;
  }
  .mv-close:hover{
    transform:scale(1.1) rotate(90deg);
    border-color:rgba(0,231,246,.9);
    background:
      linear-gradient(135deg, rgba(0,231,246,.3) 0%, rgba(108,76,255,.3) 100%),
      rgba(10, 15, 30, 0.95);
    box-shadow:0 12px 32px rgba(0,231,246,.5), 0 0 0 1px rgba(0,231,246,.8), 0 0 30px rgba(0,231,246,.4), inset 0 1px 0 rgba(255,255,255,.25);
    color:#fff;
    animation:pulse 1.5s infinite;
  }
  .mv-close:active{
    transform:scale(0.95) rotate(90deg);
  }
  .mv-close:focus-visible{
    outline:none;
    border-color:rgba(0,231,246,1);
    box-shadow:0 0 0 4px rgba(0,231,246,.2), 0 12px 32px rgba(0,231,246,.3);
  }
</style>

