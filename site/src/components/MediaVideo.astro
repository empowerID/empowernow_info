---
/**
 Local-first accessible video component.

 Props:
  - src: string | { mp4?: string; webm?: string }
  - poster?: string
  - aspect?: string (e.g., '16/9')
  - autoPlay?: boolean (autoplay will be forced muted + playsInline)
  - controls?: boolean (default true)
  - loop?: boolean
  - muted?: boolean
  - playsInline?: boolean (default true)
  - defer?: boolean (click-to-load poster -> video)
  - captions?: Array<{ src: string; srclang: string; label: string; default?: boolean }>
  - class?: string; style?: string
  - title?: string (aria-label fallback)
*/
interface SourceMap { mp4?: string; webm?: string }
interface Track { src: string; srclang: string; label: string; default?: boolean }
interface Props {
  src: string | SourceMap;
  poster?: string;
  aspect?: string;
  autoPlay?: boolean;
  controls?: boolean;
  loop?: boolean;
  muted?: boolean;
  playsInline?: boolean;
  defer?: boolean;
  captions?: Array<Track>;
  class?: string;
  style?: string;
  title?: string;
}
const p = Astro.props as Props;
const aspect = p.aspect || '16/9';
const cls = p.class || '';
const st = p.style || '';
const playsInline = p.playsInline !== false;
const controls = p.controls !== false;
const autoplay = !!p.autoPlay;
const muted = p.muted || autoplay; // ensure muted when autoplay
const aria = p.title ? undefined : 'Video content';

function isMap(x: unknown): x is SourceMap { return typeof x === 'object' && x !== null && ('mp4' in (x as any) || 'webm' in (x as any)); }
const sources = isMap(p.src) ? p.src : ({ mp4: p.src } as SourceMap);
---
<figure class={`mv-wrap ${cls}`} style={`--mv-aspect:${aspect};${st}`}>
  {p.defer ? (
    <button class="mv-defer" type="button" aria-label={p.title ? `Play: ${p.title}` : 'Play video'}>
      {p.poster && <img src={p.poster} alt="" loading="lazy" />}
      <span class="mv-play" aria-hidden="true">â–¶</span>
    </button>
  ) : (
    <video
      poster={p.poster}
      autoplay={autoplay}
      muted={muted}
      loop={p.loop}
      playsinline={playsInline}
      controls={controls}
      aria-label={p.title || aria}
    >
      {sources.webm && <source src={sources.webm} type="video/webm" />}
      {sources.mp4 && <source src={sources.mp4} type="video/mp4" />}
      {p.captions && p.captions.map(t => <track kind="captions" src={t.src} srclang={t.srclang} label={t.label} default={t.default} />)}
    </video>
  )}
  {Astro.slots.has('caption') && <figcaption><slot name="caption" /></figcaption>}
</figure>

{p.defer && (
  <script>
    document.currentScript?.previousElementSibling?.querySelector('.mv-defer')?.addEventListener('click', (e) => {
      const btn = e.currentTarget as HTMLButtonElement;
      const wrap = btn.closest('.mv-wrap') as HTMLElement;
      if (!wrap) return;
      const video = document.createElement('video');
      video.setAttribute('playsinline','');
      video.setAttribute('controls','');
      if ({autoplay}) { video.setAttribute('autoplay',''); video.muted = true; }
      if ({muted}) { video.muted = true; }
      if ({p.poster}) video.setAttribute('poster', {p.poster});
      {sources.webm ? `video.innerHTML += \`<source src="${sources.webm}" type="video/webm"/>\`` : ''}
      {sources.mp4 ? `video.innerHTML += \`<source src="${sources.mp4}" type="video/mp4"/>\`` : ''}
      wrap.replaceChildren(video);
    });
  </script>
)}

<style>
  .mv-wrap{position:relative;display:block}
  .mv-wrap::before{content:'';display:block;aspect-ratio:var(--mv-aspect)}
  .mv-wrap>video,.mv-wrap>.mv-defer{position:absolute;inset:0;width:100%;height:100%;border:0;border-radius:12px;background:var(--surface-2)}
  .mv-defer{padding:0;cursor:pointer;border:1px solid var(--border-soft);overflow:hidden}
  .mv-defer img{width:100%;height:100%;object-fit:cover;display:block;filter:brightness(.9)}
  .mv-play{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);display:inline-grid;place-items:center;width:64px;height:64px;border-radius:999px;background:rgba(0,0,0,.45);box-shadow:0 10px 30px rgba(0,0,0,.35);color:#fff;font-size:28px}
  .mv-defer:focus-visible{outline:3px solid var(--color-accent);outline-offset:2px}
  figcaption{color:var(--on-muted);font-size:13px;margin-top:6px}
</style>

