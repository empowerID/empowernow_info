---
import Base from '../../layouts/Base.astro';
import Product from '../../layouts/Product.astro';
import PricingCTA from '../../components/PricingCTA.astro';
import RelatedContent from '../../components/RelatedContent.astro';
import JsonLd from '../../components/JsonLd.astro';
import MediaVideo from '../../components/MediaVideo.astro';
import LogoWall from '../../components/LogoWall.astro';
import { getVariant } from '../../lib/experiments';
const title = 'ARIA Shield — Zero‑Token SPA + Stream Controls';
const description = 'Keep tokens out of the browser. Enforce policy on every call with per‑route AuthZEN decisions and stream‑time caps.';
const canonical = '/products/aria-shield/';
const jsonLdProduct = {"@context":"https://schema.org","@type":"Product","name":"ARIA Shield","brand":{"@type":"Brand","name":"EmpowerNow"},"description":description,"url":new URL(canonical, Astro.site)};
const variant = 'A';
const primaryCtaLabel = variant === 'A' ? 'Book demo' : 'Get a demo';
---
<Base title={title} description={description} canonical={canonical}>
	<JsonLd data={jsonLdProduct} />
    <Product title={title} description={description} canonical={canonical} eyebrow="Runtime Studio — ARIA Shield" headline="Keep tokens out of the browser. Enforce policy on every call." subhead="An application-aware BFF that brokers tokens per service, evaluates PDP decisions, applies stream-time caps, and emits signed receipts." targetICP={[ 'Enterprise SaaS', 'Regulated', 'Platform Teams' ]} keyBenefits={[ 'Zero-token SPA sessions with HTTP-only cookies', 'Per-route AuthZEN decisions with constraints & obligations', 'Budget holds, stream caps, and cryptographic receipts' ]} primaryCTA={{ label: primaryCtaLabel, href: `${import.meta.env.BASE_URL}demo/` }} secondaryCTA={{ label: 'Read docs', href: 'https://empowerid.github.io/empowernow_docs/docs/services/bff/explanation/overview/' }} docsLinks={[{ href: 'https://empowerid.github.io/empowernow_docs/docs/services/bff/explanation/overview/', label: 'BFF Overview' }, { href: 'https://empowerid.github.io/empowernow_docs/docs/services/aria-shield/', label: 'ARIA Shield Docs' }]} wwwLinks={[{ href: '/solutions/zero-token-spas/', label: 'Zero-Token SPAs' }, { href: '/deep-dives/', label: 'Deep Dives' }]} keywords={[ 'bff', 'authzen' ]}>
		<fragment slot="how">
			<section class="container" style="padding:8px 0 24px">
				<h2 class="section-title">How it works</h2>
				<ol class="numbered">
					<li>Edge authenticates SPA with HTTP-only cookies, not tokens.</li>
					<li>BFF validates session and requests PDP decision per route.</li>
					<li>On allow, BFF brokers per-service tokens and applies constraints.</li>
					<li>Receipts are signed and chained; budgets settle to actuals.</li>
				</ol>
			</section>
			<section class="container" style="padding:8px 0 24px">
				<h2 class="section-title">Budget semantics (HTTP 402)</h2>
				<pre class="glass-card" style="padding:12px;overflow:auto"><code>{`
HTTP/1.1 402 Payment Required
Content-Type: application/json

{
  "error": "budget_exceeded",
  "call_id": "abc-123",
  "policy": "llm.invoke",
  "remaining_usd": 0.00,
  "retry_after_s": 86400
}
`}</code></pre>
				<p style="color:#9ba3b7">When a route exceeds its budget, Shield returns a deterministic 402 with <code>call_id</code> and remaining budget. On permit, the hold is settled to actuals and linked in the receipt.</p>
			</section>
			<section class="container" style="padding:8px 0 24px">
				<h2 class="section-title">Streaming caps</h2>
				<pre class="glass-card" style="padding:12px;overflow:auto"><code>{`
// Pseudocode
const caps = { tokensMax: 2048, durationMsMax: 20000 };
shield.stream(model, request, caps, onChunk);
`}</code></pre>
				<p style="color:#9ba3b7">Streaming stops early when token or duration limits are reached as dictated by PDP constraints.</p>
			</section>
		</fragment>
		<fragment slot="proof">
			<LogoWall logos={[{alt:'Example',src:`${import.meta.env.BASE_URL}favicon.svg`}]} title="Trusted by" />
			<section class="container" style="padding:8px 0 24px">
				<h2 class="section-title">Videos</h2>
				<div class="card-grid">
					<div class="ns-card">
						<h3>The Unlikely Hero of AI Security</h3>
						<MediaVideo src={{ mp4: `${import.meta.env.BASE_URL}videos/products/aria/The_Unlikely_Hero_of_AI_Security.mp4` }} aspect="16/9" title="The Unlikely Hero of AI Security" defer />
					</div>
					<div class="ns-card">
						<h3>Onboarding Your AI</h3>
						<MediaVideo src={{ mp4: `${import.meta.env.BASE_URL}videos/products/aria/Onboarding_Your_AI.mp4` }} aspect="16/9" title="Onboarding Your AI" defer />
					</div>
				</div>
			</section>
			<PricingCTA title="Ready to see streaming caps and receipts?" sub="Watch the 10-minute tour or talk to us for a deep dive." primaryHref={`${import.meta.env.BASE_URL}demo/`} primaryLabel="Book demo" />
		</fragment>
		<fragment slot="related">
			<RelatedContent internalLinks={[{href:'/solutions/zero-token-spas/',label:'Zero-Token SPAs'},{href:'/resources/',label:'Resources'}]} />
		</fragment>
	</Product>
	<script>
		try { (window as any).dataLayer = (window as any).dataLayer || []; (window as any).dataLayer.push({ event: 'experiment_exposure', experiment: 'aria-hero-cta', variant: '{variant}' }); } catch {}
	</script>
</Base>
