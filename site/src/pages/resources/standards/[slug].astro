---
export async function getStaticPaths() {
    const slugs = ['oauth','oidc','pkce','rar','par','jarm','fapi-2-0','scim','ciba','mcp','caep','token-exchange','resource-indicators','dpop','mtls','dcr','authzen','authzen-draft04','authzen-search'];
	return slugs.map((slug) => ({ params: { slug } }));
}
const { slug } = Astro.params as { slug: string };
import Base from '../../../layouts/Base.astro';
import BreadcrumbsJsonLd from '../../../components/BreadcrumbsJsonLd.astro';
import Hero from '../../../components/Hero.astro';
const pretty = slug
  .replace('oidc','OpenID Connect (OIDC)')
  .replace('rar','Rich Authorization Requests (RAR)')
  .replace('par','Pushed Authorization Requests (PAR)')
  .replace('jarm','JARM')
  .replace('fapi-2-0','FAPI 2.0')
  .replace('scim','SCIM')
  .replace('ciba','CIBA')
  .replace('mcp','Model Context Protocol (MCP)')
  .replace('caep','CAEP')
  .replace('token-exchange','Token Exchange (RFC 8693)')
  .replace('resource-indicators','Resource Indicators (RFC 8707)')
  .replace('dpop','DPoP (RFC 9449)')
  .replace('mtls','OAuth mTLS (RFC 8705)')
  .replace('dcr','Dynamic Client Registration (RFC 7591/7592)')
  .replace('authzen','OpenID AuthZEN')
  .replace('authzen-draft04','OpenID AuthZEN Draft‑04')
  .replace('authzen-search','AuthZEN Search profile')
  .replace('oauth','OAuth 2.0');
const title = `${pretty} — Primer`;
const headline = `<span class="h1-gradient">${title}</span>`;
const intros: Record<string, string> = {
  'oauth': 'OAuth 2.0 is the framework for delegated authorization: clients obtain access tokens from an Authorization Server to call protected Resource Servers.',
  'oidc': 'OpenID Connect is an identity layer on top of OAuth 2.0 that issues ID Tokens (JWT) and defines discovery and UserInfo for federated login.',
  'pkce': 'PKCE (RFC 7636) protects the authorization code flow by binding the code to a one‑time verifier, preventing code interception on public clients.',
  'rar': 'Rich Authorization Requests (RFC 9396) let clients request fine‑grained, typed permissions via authorization_details instead of coarse scopes.',
  'par': 'Pushed Authorization Requests (RFC 9126) move large/structured authorization requests to a back‑channel, returning a short‑lived request_uri.',
  'jarm': 'JARM wraps authorization responses in a signed JWT, improving integrity and client validation at the OAuth redirect back‑channel.',
  'fapi-2-0': 'FAPI 2.0 is an OpenID security profile that hardens OAuth/OIDC with stricter requirements (e.g., PAR/JARM, sender‑constrained tokens).',
  'scim': 'SCIM (RFC 7643/7644) standardizes identity schemas and a REST API for provisioning users, groups, and entitlements across systems.',
  'ciba': 'CIBA enables decoupled, back‑channel user authentication where the client polls (or is notified) to complete login without a browser redirect.',
  'mcp': 'The Model Context Protocol (MCP) standardizes how clients discover and invoke tools/resources from tool servers for AI agent contexts.',
  'caep': 'CAEP (OIDF Shared Signals) defines event‑based signals (e.g., revocation, risk) that relying parties consume to adapt sessions and access.',
  'token-exchange': 'OAuth 2.0 Token Exchange (RFC 8693) issues a new token in exchange for an existing one, commonly used for on‑behalf‑of delegation.',
  'resource-indicators': 'Resource Indicators (RFC 8707) adds the resource parameter so the AS can mint a token with the correct audience for that API.',
  'dpop': 'DPoP (RFC 9449) provides sender‑constrained tokens with a per‑request proof JWT that binds the token to a client‑held key.',
  'mtls': 'OAuth mTLS (RFC 8705) authenticates clients with mutual‑TLS and binds access tokens to the client certificate (sender‑constrained).',
  'dcr': 'Dynamic Client Registration (RFC 7591/7592) standardizes how OAuth clients register and later manage their metadata via a protected endpoint.',
  'authzen': 'OpenID AuthZEN defines a standard authorization decision API and data model to externalize fine‑grained access control.',
  'authzen-draft04': 'OpenID AuthZEN Draft‑04 consolidates models and endpoints: evaluation (single/batch) and query (search) with obligations/advice.',
  'authzen-search': 'AuthZEN Search profile specifies POST /access/v1/query to return authorized items for a subject with server‑controlled pagination.'
};
const pageIntro = intros[slug] || 'Primer for this standard: what it is, how it works, and where it applies.';
const description = pageIntro;
const canonical = `/resources/standards/${slug}/`;
// Navigation helpers
const allSlugs = ['oauth','oidc','pkce','rar','par','jarm','fapi-2-0','scim','ciba','mcp','caep','token-exchange','resource-indicators','dpop','mtls','dcr','authzen','authzen-draft04','authzen-search'];
const idx = allSlugs.indexOf(slug);
const prevSlug = idx > 0 ? allSlugs[idx - 1] : null;
const nextSlug = idx < allSlugs.length - 1 ? allSlugs[idx + 1] : null;
const label = (s: string) => s
  .replace('oidc','OpenID Connect (OIDC)')
  .replace('rar','Rich Authorization Requests (RAR)')
  .replace('par','Pushed Authorization Requests (PAR)')
  .replace('jarm','JARM')
  .replace('fapi-2-0','FAPI 2.0')
  .replace('scim','SCIM')
  .replace('ciba','CIBA')
  .replace('mcp','Model Context Protocol (MCP)')
  .replace('caep','CAEP')
  .replace('token-exchange','Token Exchange (RFC 8693)')
  .replace('resource-indicators','Resource Indicators (RFC 8707)')
  .replace('dpop','DPoP (RFC 9449)')
  .replace('mtls','OAuth mTLS (RFC 8705)')
  .replace('dcr','Dynamic Client Registration (RFC 7591/7592)')
  .replace('authzen','OpenID AuthZEN')
  .replace('authzen-draft04','OpenID AuthZEN Draft‑04')
  .replace('authzen-search','AuthZEN Search profile')
  .replace('oauth','OAuth 2.0');
const prevLabel = prevSlug ? label(prevSlug) : null;
const nextLabel = nextSlug ? label(nextSlug) : null;
const base = import.meta.env.BASE_URL;
const isAuthZEN = slug === 'authzen' || slug === 'authzen-draft04' || slug === 'authzen-search';
const heroIllustration = isAuthZEN 
	? `images/illustrations/large/resources/hero-resources-standards-authorization-fundamentals.png`
	: `images/illustrations/large/resources/hero-resources-standards-details.png`;
---
<Base title={title} description={description} canonical={canonical}>
	<BreadcrumbsJsonLd items={[
		{name:'Resources',item:`${base}resources/`},
		{name:'Standards',item:`${base}resources/standards/`},
		{name:pretty,item:`${base}resources/standards/${slug}/`}
	]} />
	
	<Hero
		eyebrow="STANDARD"
		headline={headline}
		body={pageIntro}
		illustration={heroIllustration}
		illustrationAlt={`Visual representation of ${pretty} standard`}
		illustrationWidth={800}
		illustrationHeight={800}
		showAAIcon={false}
	/>

    <section class="container" style="padding:48px 0 16px">
        <a class="btn btn-ghost" href={`${base}resources/standards/`}>← All standards</a>
    </section>
    <section class="container" style="padding:8px 0 80px">
        <div class="panel-glass" style="padding:20px;margin-bottom:16px">
            <h2 class="section-title" style="margin:0 0 8px">Why it matters</h2>
            <p style="color:#9ba3b7;margin:0">Standards reduce risk and vendor lock‑in. We implement this spec across our Studios and runtime so policy is portable.</p>
        </div>
        <div class="panel-glass" style="padding:20px;margin-bottom:16px">
            <h2 class="section-title" style="margin:0 0 8px">Where it’s enforced</h2>
            <ul style="color:#9ba3b7;line-height:1.8;margin:0">
                <li><strong>Gateway</strong>: pre‑execution gating (plan/schema pins, params/egress)</li>
                <li><strong>Shield</strong>: inline budgets/stream caps/content checks</li>
                <li><strong>PDP</strong>: decisions with constraints/obligations/TTL</li>
                <li><strong>IdP</strong>: passports, token exchange, consent/DPoP</li>
            </ul>
        </div>
        <div class="panel-glass" style="padding:20px">
            <h2 class="section-title" style="margin:0 0 8px">How it works (high level)</h2>
            { slug === 'oauth' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">OAuth 2.0 (RFC 6749) issues Bearer tokens (RFC 6750) and optionally supports Token Introspection (RFC 7662). Errors MUST be conveyed via <code>WWW-Authenticate</code> with <code>error</code> and <code>error_description</code>. Introspection responses include <code>active</code>, <code>scope</code>, <code>client_id</code>, <code>sub</code>, <code>aud</code>, <code>exp</code>.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`WWW-Authenticate: Bearer realm="api", error="insufficient_scope", error_description="..."`}</code></pre>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`Introspection\n{ "active": true, "client_id": "abc", "sub": "user:1", "scope": "read", "aud": ["api://rs"], "exp": 1735689600 }`}</code></pre>
                </>
            ) }
            { slug === 'oidc' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">OIDC adds an ID Token (JWT) with claims like <code>iss</code>, <code>sub</code>, <code>aud</code>, <code>exp</code>, <code>iat</code>, and (for web flows) <code>nonce</code>. UserInfo is fetched with a Bearer token (RFC 6750). Use discovery to locate endpoints and JWKS.</p>
                </>
            ) }
            { slug === 'pkce' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">PKCE (RFC 7636) mitigates code interception. Prefer <code>code_challenge_method=S256</code>. Verifier length MUST be 43–128 characters; its lifetime MUST NOT exceed the auth code lifetime.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  autonumber\n  participant UA as Browser\n  participant Client\n  participant AS as Authorization Server\n  UA->>AS: /authorize (code_challenge=S256)\n  AS-->>UA: 302 code\n  Client->>AS: /token (code_verifier)\n  AS-->>Client: access_token`}</code></pre>
                </>
            ) }
            { slug === 'rar' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">RAR (RFC 9396) allows fine‑grained permissions via <code>authorization_details</code>. Multiple entries are allowed; the AS MUST validate types and ignore unknown members.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`{\n  "authorization_details": [{\n    "type": "ai_agent_delegation",\n    "tools": ["mcp:flights:search"],\n    "locations": ["https://tools.example.com"],\n    "dat": {"purpose": "travel"}\n  }]\n}`}</code></pre>
                </>
            ) }
            { slug === 'par' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">PAR (RFC 9126) moves large/structured requests to the back‑channel. Client authentication is REQUIRED. The returned <code>request_uri</code> has a short TTL and is used at <code>/authorize</code>.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  autonumber\n  participant Client\n  participant AS\n  Client->>AS: POST /par (client auth)\n  AS-->>Client: {request_uri, expires_in}\n  Client->>AS: /authorize?request_uri=...&response_mode=jwt\n  AS-->>Client: JARM JWT`}</code></pre>
                </>
            ) }
            { slug === 'jarm' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">JARM returns authorization responses as a signed JWT. Container includes <code>iss</code>, <code>aud</code>, <code>exp</code>, <code>iat</code>, <code>state</code>, and <code>nonce</code>. Clients MUST verify signature and expiry and handle replay protection.</p>
                </>
            ) }
            {
                slug === 'token-exchange' && (
                    <>
                        <p style="color:#9ba3b7;margin:0 8px 8px 0">RFC 8693 lets a client exchange one token for another. Inputs include <code>subject_token</code> (required), optional <code>actor_token</code>, and <code>requested_token_type</code>. The AS validates inputs and issues a new token; for OBO, JWTs commonly carry <code>act</code> (actor) and may include <code>may_act</code>.</p>
                        <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`x-www-form-urlencoded
grant_type=urn:ietf:params:oauth:grant-type:token-exchange&
subject_token=...&
subject_token_type=urn:ietf:params:oauth:token-type:access_token&
actor_token=...&
actor_token_type=urn:ietf:params:oauth:token-type:access_token&
requested_token_type=urn:ietf:params:oauth:token-type:access_token&
resource=https://api.example.com/
`}</code></pre>
                        <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  autonumber\n  participant C as Client\n  participant AS as Authorization Server (TE)\n  participant RS as Resource Server\n  C->>AS: POST /token (TE: subject_token[, actor_token])\n  AS->>AS: Validate signatures/expiry/audience/types\n  AS-->>C: access_token (may include act.sub; aud set for resource)\n  C->>RS: Use new token to call API`}</code></pre>
                        <p style="color:#9ba3b7;margin-top:8px">Key params: <code>subject_token[_type]</code>, <code>actor_token[_type]</code>, <code>requested_token_type</code>, <code>resource</code> (or AS-specific audience), <code>scope</code>. Output is a normal OAuth token response.</p>
                    </>
                )
            }
            {
                slug === 'resource-indicators' && (
                    <>
                        <p style="color:#9ba3b7;margin:0 0 8px">RFC 8707 defines the <code>resource</code> parameter to indicate the target RS. Values MUST be absolute URIs without fragments. AS issues a token suitable for that resource (often reflected in <code>aud</code>).</p>
                        <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`x-www-form-urlencoded
grant_type=client_credentials&
scope=admin.api&
resource=https://idp.example.com/api/admin
`}</code></pre>
                        <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  participant Client\n  participant AS as Authorization Server\n  participant Admin as Admin API\n  Client->>AS: /token (resource=https://.../api/admin)\n  AS-->>Client: access_token (aud matches resource)\n  Client->>Admin: Authorization: Bearer &lt;access_token&gt;`}</code></pre>
                        <p style="color:#9ba3b7;margin-top:8px">Multiple <code>resource</code> values may be sent; the AS selects what it supports. If both vendor <code>audience</code> and <code>resource</code> are sent, follow your AS precedence (RFC recommends <code>resource</code>).</p>
                    </>
                )
            }
            {
                slug === 'dpop' && (
                    <>
                        <p style="color:#9ba3b7;margin:0 0 8px">DPoP (RFC 9449) binds tokens to a client key. Proof JWT header contains the public JWK; payload includes <code>htu</code> (URL), <code>htm</code> (method), <code>iat</code>, <code>jti</code>; RS requests include <code>ath</code> (access token hash). Issued tokens carry <code>cnf.jkt</code>.</p>
                        <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`DPoP: eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IlJTMjU2Iiwia2lkIjoiIiwiamdrIjp7Imt0eSI6IlJTQSIsIm4iOiIuLi4iLCJlIjoiAQABIn19.eyJodG0iOiJQT1NUIiwiaHR1IjoiaHR0cHM6Ly9pZHAuZXhhbXBsZS5jb20vdG9rZW4iLCJpYXQiOjE3MDAwMDAwMDAsImp0aSI6InU0LWJpZCJ9..sig`}</code></pre>
                        <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nflowchart TD\n  A[Client] -- DPoP proof --> TE[Token Endpoint]\n  TE -->|cnf.jkt in token| AT[Access Token]\n  A -- DPoP proof + AT --> RS[Resource Server]\n  RS -->|verify sig, htm/htu, jti, ath| Allow`}</code></pre>
                        <p style="color:#9ba3b7;margin-top:8px">Servers commonly enforce replay windows on <code>jti</code> and may issue nonces. Resource calls MUST present a fresh proof per request.</p>
                    </>
                )
            }
            { slug === 'mtls' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">RFC 8705 defines OAuth mTLS: client auth at AS and certificate‑bound access tokens at RS. Two auth modes: <code>tls_client_auth</code> (CA‑issued) and <code>self_signed_tls_client_auth</code>. Tokens carry <code>cnf</code> with <code>x5t#S256</code>.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`"cnf": {"x5t#S256": "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"}`}</code></pre>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  participant Client\n  participant AS as Authorization Server (mTLS)\n  participant RS as Resource Server (mTLS)\n  Client->>AS: TLS handshake (client cert) + /token\n  AS-->>Client: cert-bound access_token (cnf.x5t#S256)\n  Client->>RS: TLS handshake (same cert) + request\n  RS->>RS: Verify cert thumbprint matches token`}</code></pre>
                </>
            ) }
            { slug === 'dcr' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">RFC 7591/7592 specify dynamic registration and management. Clients POST metadata (optionally with a <code>software_statement</code>) to <code>/register</code>, receive <code>client_id</code> (and secret) plus a <code>registration_access_token</code> and <code>registration_client_uri</code> for subsequent GET/PATCH/DELETE (7592).</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`POST /register\n{\n  "redirect_uris": ["https://app.example.com/cb"],\n  "grant_types": ["authorization_code"],\n  "response_types": ["code"],\n  "token_endpoint_auth_method": "tls_client_auth",\n  "software_statement": "eyJ..."\n}`}</code></pre>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  participant Client\n  participant AS as Authorization Server\n  Client->>AS: POST /register (metadata)\n  AS-->>Client: 201 { client_id[, client_secret] }\n  Client->>AS: (7592) GET/PATCH/DELETE /register/{client_id}`}</code></pre>
                </>
            ) }
            { slug === 'scim' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">SCIM defines identity schemas and APIs. PATCH supports <code>add</code>, <code>replace</code>, and <code>remove</code>. Filtering, sorting, and pagination should be supported; use ETags for concurrency.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`PATCH /Users/2819c223-7f76-453a-919d-413861904646\n{\n  "Operations": [{\n    "op": "replace",\n    "path": "name.familyName",\n    "value": "Benson"\n  }]\n}`}</code></pre>
                </>
            ) }
            { slug === 'ciba' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">CIBA enables backchannel authentication. Modes: poll, ping, push. The AS returns <code>auth_req_id</code> and <code>interval</code>; the client polls <code>/token</code> until success or timeout.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  autonumber\n  participant Client\n  participant AS\n  Client->>AS: backchannel auth (login_hint)\n  AS-->>Client: {auth_req_id, interval}\n  loop poll\n    Client->>AS: POST /token (auth_req_id)\n    AS-->>Client: authorization_pending\n  end\n  AS-->>Client: {access_token, id_token}`}</code></pre>
                </>
            ) }
            { slug === 'fapi-2-0' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">FAPI 2.0 hardens OAuth/OIDC. Baseline vs Advanced differ by requirements such as PAR/JARM and sender‑constrained tokens (mTLS or DPoP). Follow profile conformance for cipher suites and redirect URI handling.</p>
                </>
            ) }
            { slug === 'caep' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">CAEP (OIDF Shared Signals) standardizes event‑based session and risk signals (e.g., token revoked, risk changed). Push or query bindings deliver events; relying parties consume and adjust sessions/authorization.</p>
                </>
            ) }
            { slug === 'mcp' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">MCP defines a protocol between clients and tool servers for model context. Clarify roles (client/server/tools), transport vs schema, version negotiation, and policy/security hooks.</p>
                </>
            ) }
            { slug === 'authzen' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">OpenID AuthZEN (OIDF) defines an authorization decision API and common data model to externalize fine‑grained authorization. It complements OAuth/OIDC by standardizing decision requests/responses (subject, action, resource, context) and obligations.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  participant Client\n  participant PDP as AuthZ Decision Service\n  participant RS as Resource Server\n  Client->>PDP: evaluate(subject, action, resource, context)\n  PDP-->>Client: { decision, constraints, obligations }\n  Client->>RS: Enforce decision + constraints`}</code></pre>
                </>
            ) }
            { slug === 'authzen-draft04' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">Draft‑04 consolidates endpoints and models: <code>/access/v1/evaluation</code> (single), <code>/access/v1/evaluations</code> (batch), <code>/access/v1/query</code> (search). Requests use <code>AuthorizationRequest</code>; responses carry <code>decision</code>, <code>obligations</code>, <code>advice</code>, and optional <code>status</code>.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  autonumber\n  participant Client\n  participant PDP\n  participant RS as Resource Server\n  Client->>PDP: POST /access/v1/evaluation (AuthorizationRequest)\n  PDP-->>Client: AuthorizationResponse { decision, obligations }\n  Client->>RS: Enforce constraints/obligations`}</code></pre>
                </>
            ) }
            { slug === 'authzen-search' && (
                <>
                    <p style="color:#9ba3b7;margin:0 0 8px">Search profile: <code>POST /access/v1/query</code> returns authorized results for the requesting subject with server‑controlled filters/pagination. Use <code>correlation_id</code> for traceability.</p>
                    <pre class="glass-card" style="padding:12px;overflow:auto"><code>{`mermaid\nsequenceDiagram\n  participant Client\n  participant PDP\n  Client->>PDP: POST /access/v1/query { filters, page }\n  PDP-->>Client: { items: [...], page: {...} }`}</code></pre>
                </>
            ) }
        </div>
    </section>
    <section class="container" style="padding:8px 0 24px">
        <div class="panel-glass" style="padding:16px">
            <h2 class="section-title" style="margin:0 0 8px">References</h2>
            <ul style="margin:0;color:#9ba3b7;line-height:1.8;padding-left:18px">
                { slug === 'oauth' && (<>
                    <li><a href="https://datatracker.ietf.org/doc/rfc6749/">RFC 6749: OAuth 2.0</a></li>
                    <li><a href="https://datatracker.ietf.org/doc/rfc6750/">RFC 6750: Bearer Token Usage</a></li>
                    <li><a href="https://datatracker.ietf.org/doc/rfc7662/">RFC 7662: Token Introspection</a></li>
                </>) }
                { slug === 'oidc' && (<li><a href="https://openid.net/specs/openid-connect-core-1_0.html">OpenID Connect Core 1.0</a></li>) }
                { slug === 'pkce' && (<li><a href="https://datatracker.ietf.org/doc/rfc7636/">RFC 7636: PKCE</a></li>) }
                { slug === 'rar' && (<li><a href="https://datatracker.ietf.org/doc/rfc9396/">RFC 9396: RAR</a></li>) }
                { slug === 'par' && (<li><a href="https://datatracker.ietf.org/doc/rfc9126/">RFC 9126: PAR</a></li>) }
                { slug === 'jarm' && (<li><a href="https://openid.net/specs/oauth-v2-jarm.html">OIDF: JARM</a></li>) }
                { slug === 'token-exchange' && (<li><a href="https://datatracker.ietf.org/doc/rfc8693/">RFC 8693: OAuth 2.0 Token Exchange</a></li>) }
                { slug === 'resource-indicators' && (<li><a href="https://datatracker.ietf.org/doc/rfc8707/">RFC 8707: Resource Indicators</a></li>) }
                { slug === 'dpop' && (<li><a href="https://datatracker.ietf.org/doc/rfc9449/">RFC 9449: DPoP</a></li>) }
                { slug === 'mtls' && (<li><a href="https://datatracker.ietf.org/doc/rfc8705/">RFC 8705: OAuth mTLS</a></li>) }
                { slug === 'dcr' && (<>
                    <li><a href="https://datatracker.ietf.org/doc/rfc7591/">RFC 7591: Dynamic Client Registration</a></li>
                    <li><a href="https://datatracker.ietf.org/doc/rfc7592/">RFC 7592: Client Registration Management</a></li>
                </>) }
                { slug === 'scim' && (<>
                    <li><a href="https://datatracker.ietf.org/doc/rfc7643/">RFC 7643: SCIM Core Schema</a></li>
                    <li><a href="https://datatracker.ietf.org/doc/rfc7644/">RFC 7644: SCIM Protocol</a></li>
                </>) }
                { slug === 'ciba' && (<li><a href="https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html">OIDF: CIBA Core</a></li>) }
                { slug === 'fapi-2-0' && (<li><a href="https://openid.net/specs/fapi-2_0-baseline.html">OIDF: FAPI 2.0 Baseline</a></li>) }
                { slug === 'caep' && (<li><a href="https://openid.net/specs/openid-caep-specification-1_0.html">OIDF: CAEP</a></li>) }
                { slug === 'authzen' && (<li><a href="https://openid.net/wg/az/">OpenID Foundation: AuthZEN WG</a></li>) }
                { slug === 'mcp' && (<li><a href="https://modelcontextprotocol.io/">Model Context Protocol Spec</a></li>) }
            </ul>
        </div>
    </section>
    <section class="container" style="padding:8px 0 64px">
        <div style="display:flex;gap:10px;flex-wrap:wrap;justify-content:space-between">
            <div>{prevSlug && (<a class="btn btn-ghost" href={`${base}resources/standards/${prevSlug}/`}>← {prevLabel}</a>)}</div>
            <div><a class="btn" href={`${base}resources/standards/`}>All standards</a></div>
            <div>{nextSlug && (<a class="btn btn-ghost" href={`${base}resources/standards/${nextSlug}/`}>{nextLabel} →</a>)}</div>
        </div>
    </section>
</Base>

<style>
	/* Hero layout styles */
	.hero-split {
		display: flex;
		gap: 48px;
		align-items: center;
		flex-wrap: wrap;
	}

	.hero-content {
		flex: 1 1 520px;
		min-width: 300px;
	}

	.hero-visual {
		flex: 1 1 400px;
		min-width: 280px;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	/* Mobile: stack vertically, illustration on top */
	@media (max-width: 768px) {
		.hero-split {
			flex-direction: column-reverse;
		}

		.hero-visual {
			width: 100%;
			max-width: 400px;
			margin: 0 auto 32px;
		}
	}

	/* Tablet: reduce gaps */
	@media (min-width: 769px) and (max-width: 1024px) {
		.hero-split {
			gap: 32px;
		}
	}
</style>


