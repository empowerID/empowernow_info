---
interface CTA { label: string; href: string }
interface Link { href: string; label: string }
interface Props {
	title: string;
	description: string;
	canonical: string;
	headline: string;
    eyebrow?: string;
	subhead?: string;
	keyBenefits?: string[];
	benefitIcons?: string[];
	targetICP?: string[];
	primaryCTA?: CTA;
	secondaryCTA?: CTA;
	tertiaryCTA?: CTA;
	jsonLdProduct?: Record<string, any>;
	proofTitle?: string;
	docsLinks?: Link[];
	wwwLinks?: Link[];
	keywords?: string[];
	/** product key for gradient mapping: idp|pdp|crud|collector|shield|gateway|vds|nowconnect */
	productKey?: string;
	/** optional custom background image path (relative to BASE_URL, e.g., "images/backgrounds/bg-crud-hero.jpg") */
	heroBackground?: string;
	/** optional illustration image for right side of hero (relative to BASE_URL) */
	heroIllustration?: string;
	/** alt text for hero illustration (required if heroIllustration provided) */
	heroIllustrationAlt?: string;
	/** optional illustration width for sizing (default: 480) */
	heroIllustrationWidth?: number;
	/** optional illustration height for sizing (default: 360) */
	heroIllustrationHeight?: number;
}
function docsHref(p: Props): string | undefined {
	return (p.secondaryCTA && p.secondaryCTA.href) || (p.docsLinks && p.docsLinks[0]?.href) || undefined;
}
const p = Astro.props as Props;
import { relatedFor } from '../lib/keywords';
import CrossSiteLinks from '../components/CrossSiteLinks.astro';
import RelatedContent from '../components/RelatedContent.astro';
import BreadcrumbsJsonLd from '../components/BreadcrumbsJsonLd.astro';
import Hero from '../components/Hero.astro';
const relatedLinks = Array.isArray(p.keywords) ? relatedFor(p.keywords) : [];
const base = import.meta.env.BASE_URL;
---
{p.jsonLdProduct && <script type="application/ld+json">{JSON.stringify(p.jsonLdProduct)}</script>}
<BreadcrumbsJsonLd items={[
	{ name: 'Home', item: new URL(import.meta.env.BASE_URL || '/', Astro.site).toString() },
	{ name: 'Products', item: new URL(`${import.meta.env.BASE_URL}products/`, Astro.site).toString() },
	{ name: p.headline, item: new URL(`${import.meta.env.BASE_URL}${String(p.canonical||'').replace(/^\//,'')}`, Astro.site).toString() },
]} />
<div class={`product-root ${p.productKey ? `product--${p.productKey}` : ''}`}>
    <Hero
        layout="split"
        background={p.heroBackground}
        eyebrow={p.eyebrow}
        headline={p.headline}
        subhead={p.subhead}
        illustration={p.heroIllustration}
        illustrationAlt={p.heroIllustrationAlt}
        illustrationWidth={p.heroIllustrationWidth || 480}
        illustrationHeight={p.heroIllustrationHeight || 360}
    >
        <div slot="content">
            {p.eyebrow && <div class="hero__eyebrow">{p.eyebrow}</div>}
            <h1 class="display hero__headline" set:html={p.headline} />
            {p.subhead && <p class="hero__subhead" set:html={p.subhead} />}
            {p.targetICP && p.targetICP.length>0 && (
                <div class="hero__chips">
                    {p.targetICP.slice(0,2).map((t) => <span class="chip chip--outline-violet" style="padding:8px 16px;font-size:14px;font-weight:600">{t}</span>)}
                    {p.targetICP.length>2 && <span class="chip chip--more" style="padding:8px 16px;font-size:14px">+{p.targetICP.length-2} more</span>}
                </div>
            )}
        </div>
        <div slot="actions" class="hero__actions">
            {p.primaryCTA && <a class="btn btn-primary" href={p.primaryCTA.href} aria-label={`Primary: ${p.primaryCTA.label}`} data-ev="cta_click" data-label={p.primaryCTA.label} data-position="hero_primary" style="padding:14px 32px;font-size:16px;font-weight:700">{p.primaryCTA.label}</a>}
            {p.secondaryCTA && <a class="btn btn-secondary" href={p.secondaryCTA.href} aria-label={`Secondary: ${p.secondaryCTA.label}`} data-ev="cta_click" data-label={p.secondaryCTA.label} data-position="hero_secondary" style="padding:14px 32px;font-size:16px;font-weight:600">{p.secondaryCTA.label}</a>}
            {p.tertiaryCTA && <a class="btn btn-secondary" href={p.tertiaryCTA.href} aria-label={`Tertiary: ${p.tertiaryCTA.label}`} data-ev="cta_click" data-label={p.tertiaryCTA.label} data-position="hero_tertiary" style="padding:14px 32px;font-size:16px;font-weight:600">{p.tertiaryCTA.label}</a>}
            <div class="hero__aa-icon">
                <img src={`${base}images/icons/icon-aa.png`} alt="AA compliant" />
                <span class="hero__aa-tooltip">AA compliant</span>
            </div>
        </div>
        <div slot="extra">
            <slot name="cta-after" />
        </div>
    </Hero>
    <nav class="studio-bar" aria-label="Product sections">
        <div class="container studio-bar-inner">
            <div class="studio-brand">
                <span class="studio-title">{p.headline}</span>
            </div>
            <ul class="studio-tabs" role="tablist" id="studio-tabs-list">
                <!-- Tabs will be dynamically generated by JavaScript based on actual page sections -->
            </ul>
            <div class="studio-cta">
                {docsHref(p) && (
                    <a class="btn btn-docs" href={docsHref(p)} data-ev="nav_click" data-label="docs" data-position="studio_bar">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path d="M3 2.5C3 2.22386 3.22386 2 3.5 2H9.08579C9.2158 2 9.34051 2.05268 9.43303 2.14645L12.8536 5.56711C12.9473 5.65963 13 5.78434 13 5.91421V13.5C13 13.7761 12.7761 14 12.5 14H3.5C3.22386 14 3 13.7761 3 13.5V2.5Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M9 2V5.5C9 5.77614 9.22386 6 9.5 6H13" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <span>Docs</span>
                    </a>
                )}
            </div>
        </div>
    </nav>
    <section id="why" class="container reveal-on-scroll" style="padding:40px 0 80px">
        {p.keyBenefits && p.keyBenefits.length > 0 && (
            <>
                <h2 style="font-size:2rem;font-weight:700;color:#e8ecff;margin:0 0 24px">Why it wins</h2>
                <div style="display:grid;grid-template-columns:repeat(2,1fr);gap:20px;margin-top:16px">
                    {p.keyBenefits.map((b, idx) => {
                        const defaultIconMap = [
                            'icon-gear-spin.png',
                            'icon-clipboard-path.png', 
                            'icon-rocket.png',
                            'icon-shield-aria.png',
                            'icon-receipt.png'
                        ];
                        const iconSrc = (p.benefitIcons && p.benefitIcons[idx]) || defaultIconMap[idx] || 'icon-gear-spin.png';
                        return (
                            <div class="panel-glow hover-rise" style="padding:24px;border:1px solid rgba(255,255,255,.08);position:relative;overflow:hidden">
                                {p.productKey && <div class={`product-rail rail--${p.productKey}`} aria-hidden="true" style="position:absolute;top:0;left:0;right:0;height:3px;margin:0"></div>}
                                <div style="display:flex;align-items:center;gap:20px">
                                    <div style="flex-shrink:0;width:56px;height:56px;display:flex;align-items:center;justify-content:center">
                                        <img src={`${import.meta.env.BASE_URL}images/icons/${iconSrc}`} alt="" style="width:56px;height:56px;opacity:0.85" aria-hidden="true" />
                                    </div>
                                    <div style="flex:1;min-width:0">
                                        <p style="margin:0;color:#e8ecff;font-size:16px;line-height:1.5;font-weight:500">{b}</p>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
                <div class="row-hairline" style="margin-top:64px"></div>
            </>
        )}
    </section>
    <section id="how" class="container" style="padding:8px 0 16px"><slot name="how" /></section>
    <section id="standards" class="container" style="padding:0 0 24px"><slot name="standards" /></section>
    <section id="examples" class="container" style="padding:0 0 24px"><slot name="examples" /></section>
    <section class="container" style="padding:0 0 24px">
        <div style="display:flex;gap:12px;flex-wrap:wrap">
            {p.primaryCTA && <a class="btn btn-primary" href={p.primaryCTA.href} aria-label={`Primary: ${p.primaryCTA.label}`} data-ev="cta_click" data-label={p.primaryCTA.label} data-position="mid_primary">See it live</a>}
            {p.secondaryCTA && <a class="btn btn-secondary" href={p.secondaryCTA.href} aria-label={`Secondary: ${p.secondaryCTA.label}`} data-ev="cta_click" data-label={p.secondaryCTA.label} data-position="mid_secondary">Read docs</a>}
        </div>
    </section>
    <section id="plans" class="container" style="padding:8px 0 24px">
        <h2 class="section-title">Plans</h2>
        <div style="display:flex;gap:10px;flex-wrap:wrap;margin-top:10px">
            <a class="btn btn-primary" href={`${import.meta.env.BASE_URL}demo/`}>Book demo</a>
            <a class="btn" style="border-color:var(--color-accent);color:var(--color-accent)" href={`${import.meta.env.BASE_URL}pricing/`}>See pricing</a>
            <a class="btn" href={`${import.meta.env.BASE_URL}contact/`}>Talk to us</a>
        </div>
    </section>
</div>
{p.proofTitle && <section class="container" style="padding:8px 0 8px"><h2 class="section-title">{p.proofTitle}</h2></section>}
<section class="container" style="padding:8px 0 24px"><slot name="proof" /></section>
<slot name="related" />

<!-- Read more band (curated) -->
<section class="container reveal-on-scroll" style="padding:16px 0 40px">
	<h2 class="section-title">Read more</h2>
	<div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:20px;margin-top:16px">
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">What is AuthZEN?</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">Understand decisions, constraints and obligations.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Read →</a>
		</div>
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Constraints & Obligations</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">How PDP returns enforceable constraints with decisions.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Read →</a>
		</div>
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Explainability</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">Expose why a decision happened for audits and UX.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Read →</a>
		</div>
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Delegated Authorization</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">Model relationships and delegations for business context.</p>
			<a class="btn btn-ghost" href={`${import.meta.env.BASE_URL}solutions/delegated-authorization/`} style="font-size:14px">Explore →</a>
		</div>
	</div>
</section>

<!-- Next steps grid -->
<section class="container reveal-on-scroll" style="padding:24px 0 48px">
	<h2 class="section-title">What's next?</h2>
	<div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:20px;margin-top:16px">
		<div class="panel-glow hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Book a demo</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">See decisions and constraints live.</p>
			<a class="btn btn-primary" href={`${import.meta.env.BASE_URL}demo/`} style="font-size:14px">Book demo</a>
		</div>
		<div class="glass-card hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Talk to a specialist</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">Map decisions to your domain model.</p>
			<a class="btn btn-ghost" style="border:2px solid var(--color-accent);color:var(--color-accent);font-size:14px" href={`${import.meta.env.BASE_URL}contact/`}>Contact</a>
		</div>
		<div class="glass-card hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Read the docs</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">Dive into PDP API and examples.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Docs ↗</a>
		</div>
		<div class="glass-card hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Explore standards</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">AuthZEN, OAuth, DPoP and more.</p>
			<a class="btn btn-ghost" href={`${import.meta.env.BASE_URL}resources/standards/`} style="font-size:14px">Standards →</a>
		</div>
	</div>
</section>
{(p.docsLinks && p.docsLinks.length) || (p.wwwLinks && p.wwwLinks.length) ? <CrossSiteLinks docsLinks={p.docsLinks} wwwLinks={p.wwwLinks} /> : null}
{relatedLinks.length > 0 && <RelatedContent internalLinks={relatedLinks} />}

<style>
	/* Why it wins grid - responsive 2-column layout */
	@media (max-width: 768px) {
		#why div[style*="grid-template-columns"] {
			grid-template-columns: 1fr !important;
		}
	}
	
	/* Hero layout styles now in custom-styles.css (unified hero system) */
	/* Studio Bar styles in custom-styles.css for centralized management */
</style>

<script>
	// Reveal on scroll animation
	if ('IntersectionObserver' in window) {
		const revealElements = [...document.querySelectorAll('.reveal-on-scroll')];
		const revealObserver = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add('is-visible');
					revealObserver.unobserve(entry.target);
				}
			});
		}, { threshold: 0.25 });
		revealElements.forEach((el) => revealObserver.observe(el));
	}

	// Studio Bar active tab tracking and sticky behavior
	(function initStudioBar() {
		const studioBar = document.querySelector('.studio-bar');
		const tabsList = document.getElementById('studio-tabs-list');
		const heroSection = document.querySelector('.hero-plate');
		
		if (!studioBar || !tabsList || !heroSection) {
			console.warn('Studio Bar: Missing required elements');
			return;
		}

		// Find all navigable sections on the page
		// Look for sections with h2.section-title headings (primary navigation points)
		const allSectionHeadings = document.querySelectorAll('h2.section-title');
		const foundSections: Array<{id: string; label: string; element: HTMLElement}> = [];
		
		allSectionHeadings.forEach((heading) => {
			// Find the IMMEDIATE parent section element with an ID
			// Don't climb up to distant parent sections
			let section = (heading as HTMLElement).parentElement;
			while (section && section.tagName !== 'SECTION') {
				section = section.parentElement;
			}
			
			// Only use this section if it has an ID
			if (!section || !section.hasAttribute('id')) {
				// Skip headings not in a direct section with ID
				return;
			}
			
			const sectionEl = section as HTMLElement;
			const id = sectionEl.getAttribute('id');
			const label = heading.textContent?.trim();
			
			// Check if section has meaningful content (not just an empty slot)
			const hasContent = sectionEl.offsetHeight > 50; // More than 50px = has content
			
			if (id && label && hasContent) {
				// Avoid duplicates (in case multiple headings in same section)
				const alreadyAdded = foundSections.some(s => s.id === id);
				if (!alreadyAdded) {
					foundSections.push({ id, label, element: sectionEl });
				}
			}
		});
		
		// Add "Why it wins" section if it exists and has content
		const whySection = document.getElementById('why');
		if (whySection && whySection.offsetHeight > 50) {
			const alreadyAdded = foundSections.some(s => s.id === 'why');
			if (!alreadyAdded) {
				foundSections.push({ 
					id: 'why', 
					label: 'Why it wins', 
					element: whySection as HTMLElement 
				});
			}
		}
		
		// Sort sections by their position on the page (top to bottom)
		foundSections.sort((a, b) => {
			const aTop = a.element.offsetTop;
			const bTop = b.element.offsetTop;
			return aTop - bTop;
		});
		
		// Debug: Log found sections in order
		console.log('Studio Bar: Found', foundSections.length, 'sections (in page order):', 
			foundSections.map(s => `#${s.id} ("${s.label}")`).join(', '));
		
		if (foundSections.length === 0) {
			console.warn('Studio Bar: No sections found to create tabs');
			return;
		}
		
		// Dynamically create tabs
		foundSections.forEach((section) => {
			const li = document.createElement('li');
			li.setAttribute('role', 'presentation');
			
			const a = document.createElement('a');
			a.setAttribute('role', 'tab');
			a.setAttribute('href', `#${section.id}`);
			a.className = 'studio-tab-btn';
			
			const span = document.createElement('span');
			span.textContent = section.label;
			
			a.appendChild(span);
			li.appendChild(a);
			tabsList.appendChild(li);
		});
		
		// Now get references to the dynamically created elements
		const tabButtons = document.querySelectorAll('.studio-tab-btn');
		const sections = foundSections.map(s => s.element);

		// Get the position where studio bar should become sticky
		const stickyTriggerPoint = (heroSection as HTMLElement).offsetHeight - 80;

		// Handle sticky behavior
		function updateStickyState() {
			if (!studioBar) return;
			const scrollPos = window.scrollY;
			
			if (scrollPos > stickyTriggerPoint) {
				studioBar.classList.add('is-sticky');
			} else {
				studioBar.classList.remove('is-sticky');
			}
		}

		// Set active tab based on scroll position
		function updateActiveTab() {
			const scrollPos = window.scrollY + 250; // Offset for nav + bar + buffer

			let currentSection = '';
			let closestSection = '';
			let closestDistance = Infinity;
			
			// Find which section we're currently viewing
			sections.forEach((section) => {
				const el = section as HTMLElement;
				const sectionTop = el.offsetTop;
				const sectionBottom = sectionTop + el.offsetHeight;
				const sectionMiddle = sectionTop + (el.offsetHeight / 2);
				
				// Check if scroll position is within this section
				if (scrollPos >= sectionTop - 150 && scrollPos < sectionBottom + 50) {
					currentSection = section.getAttribute('id') || '';
				}
				
				// Also track closest section to viewport center
				const distanceFromTop = Math.abs(sectionTop - scrollPos);
				if (distanceFromTop < closestDistance) {
					closestDistance = distanceFromTop;
					closestSection = section.getAttribute('id') || '';
				}
			});

			// Use current section if found, otherwise use closest
			const activeSection = currentSection || closestSection;

			// Update tab button active states
			tabButtons.forEach((btn) => {
				const href = btn.getAttribute('href') || '';
				const targetId = href.replace('#', '');
				if (targetId === activeSection) {
					btn.classList.add('is-active');
					// Auto-scroll active tab into view
					btn.scrollIntoView({ 
						behavior: 'smooth', 
						block: 'nearest', 
						inline: 'center' 
					});
				} else {
					btn.classList.remove('is-active');
				}
			});
		}

		// Handle smooth scroll on click
		tabButtons.forEach((btn) => {
			btn.addEventListener('click', (e) => {
				e.preventDefault();
				const href = btn.getAttribute('href') || '';
				const targetId = href.replace('#', '');
				const targetEl = document.getElementById(targetId);
				
				if (targetEl) {
					// Scroll to section with offset for fixed bar (64px nav + 64px studio bar + buffer)
					const offset = 150;
					const targetPosition = targetEl.offsetTop - offset;
					window.scrollTo({
						top: targetPosition,
						behavior: 'smooth'
					});

					// Update active state immediately
					tabButtons.forEach((b) => b.classList.remove('is-active'));
					btn.classList.add('is-active');

					// Track navigation event
					const w = window as any;
					if (w.dataLayer) {
						w.dataLayer.push({
							event: 'nav_click',
							label: targetId,
							position: 'studio_bar'
						});
					}
				}
			});
		});

		// Update sticky state and active tab on scroll (throttled)
		let ticking = false;
		window.addEventListener('scroll', () => {
			if (!ticking) {
				window.requestAnimationFrame(() => {
					updateStickyState();
					updateActiveTab();
					ticking = false;
				});
				ticking = true;
			}
		}, { passive: true });

		// Set initial states
		updateStickyState();
		updateActiveTab();
	})();
</script>
