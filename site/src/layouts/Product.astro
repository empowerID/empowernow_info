---
interface CTA { label: string; href: string }
interface Link { href: string; label: string }
interface Props {
	title: string;
	description: string;
	canonical: string;
	headline: string;
    eyebrow?: string;
	subhead?: string;
	keyBenefits?: string[];
	benefitIcons?: string[];
	targetICP?: string[];
	primaryCTA?: CTA;
	secondaryCTA?: CTA;
	tertiaryCTA?: CTA;
	jsonLdProduct?: Record<string, any>;
	proofTitle?: string;
	docsLinks?: Link[];
	wwwLinks?: Link[];
	keywords?: string[];
	/** product key for gradient mapping: idp|pdp|crud|collector|shield|gateway|vds|nowconnect */
	productKey?: string;
	/** optional icon (emoji or SVG text) shown in studio bar */
	productIcon?: string;
	/** optional custom background image path (relative to BASE_URL, e.g., "images/backgrounds/bg-crud-hero.jpg") */
	heroBackground?: string;
	/** optional illustration image for right side of hero (relative to BASE_URL) */
	heroIllustration?: string;
	/** alt text for hero illustration (required if heroIllustration provided) */
	heroIllustrationAlt?: string;
	/** optional illustration width for sizing (default: 480) */
	heroIllustrationWidth?: number;
	/** optional illustration height for sizing (default: 360) */
	heroIllustrationHeight?: number;
}
function docsHref(p: Props): string | undefined {
	return (p.secondaryCTA && p.secondaryCTA.href) || (p.docsLinks && p.docsLinks[0]?.href) || undefined;
}
const p = Astro.props as Props;
import { relatedFor } from '../lib/keywords';
import CrossSiteLinks from '../components/CrossSiteLinks.astro';
import RelatedContent from '../components/RelatedContent.astro';
import BreadcrumbsJsonLd from '../components/BreadcrumbsJsonLd.astro';
const relatedLinks = Array.isArray(p.keywords) ? relatedFor(p.keywords) : [];

// Dynamic hero background URL
const heroBackgroundUrl = p.heroBackground 
	? `${import.meta.env.BASE_URL}${p.heroBackground}`
	: `${import.meta.env.BASE_URL}images/backgrounds/bg-homepage-hero.jpg`;

// Check if hero has illustration (slot or prop)
const hasHeroIllustration = Astro.slots.has('hero-illustration') || !!p.heroIllustration;
const heroLayoutClass = hasHeroIllustration ? 'hero-split' : 'hero-single';
---
{p.jsonLdProduct && <script type="application/ld+json">{JSON.stringify(p.jsonLdProduct)}</script>}
<BreadcrumbsJsonLd items={[
	{ name: 'Home', item: new URL(import.meta.env.BASE_URL || '/', Astro.site).toString() },
	{ name: 'Products', item: new URL(`${import.meta.env.BASE_URL}products/`, Astro.site).toString() },
	{ name: p.headline, item: new URL(`${import.meta.env.BASE_URL}${String(p.canonical||'').replace(/^\//,'')}`, Astro.site).toString() },
]} />
<div class={`product-root ${p.productKey ? `product--${p.productKey}` : ''}`}>
    <header class="hero-plate page-stage" style={`padding:160px 0 64px;background-image:url(${heroBackgroundUrl});background-size:cover;background-position:center;background-repeat:no-repeat`}>
        <section class={`container ${heroLayoutClass}`} style="position:relative;z-index:1">
            <div class="hero-content">
                {p.eyebrow && <div class="eyebrow" style="font-size:14px;font-weight:700;letter-spacing:0.08em;text-transform:uppercase;color:rgba(0,231,246,0.85);margin:0 0 16px">{p.eyebrow}</div>}
                <h1 class="display" style="margin:0 0 20px;font-size:clamp(2.5rem,5vw,4rem);line-height:1.1;font-weight:800">{p.headline}</h1>
                {p.subhead && <p style="color:#b3bcd2;max-width:860px;font-size:clamp(1.125rem,2vw,1.375rem);line-height:1.5;margin:0 0 24px">{p.subhead}</p>}
                {p.targetICP && p.targetICP.length>0 && (
                    <div style="display:flex;gap:10px;flex-wrap:wrap;margin:0 0 32px">
                        {p.targetICP.slice(0,2).map((t) => <span class="chip chip--outline-violet" style="padding:8px 16px;font-size:14px;font-weight:600">{t}</span>)}
                        {p.targetICP.length>2 && <span class="chip chip--more" style="padding:8px 16px;font-size:14px">+{p.targetICP.length-2} more</span>}
                    </div>
                )}
                <div style="display:flex;gap:16px;flex-wrap:wrap;align-items:center">
                    {p.primaryCTA && <a class="btn btn-primary" href={p.primaryCTA.href} aria-label={`Primary: ${p.primaryCTA.label}`} data-ev="cta_click" data-label={p.primaryCTA.label} data-position="hero_primary" style="padding:14px 32px;font-size:16px;font-weight:700">{p.primaryCTA.label}</a>}
                    {p.secondaryCTA && <a class="btn btn-secondary" href={p.secondaryCTA.href} aria-label={`Secondary: ${p.secondaryCTA.label}`} data-ev="cta_click" data-label={p.secondaryCTA.label} data-position="hero_secondary" style="padding:14px 32px;font-size:16px;font-weight:600">{p.secondaryCTA.label}</a>}
                    {p.tertiaryCTA && <a class="btn btn-secondary" href={p.tertiaryCTA.href} aria-label={`Tertiary: ${p.tertiaryCTA.label}`} data-ev="cta_click" data-label={p.tertiaryCTA.label} data-position="hero_tertiary" style="padding:14px 32px;font-size:16px;font-weight:600">{p.tertiaryCTA.label}</a>}
                    <span class="chip chip--success" style="padding:8px 16px;font-size:14px;font-weight:600">AA compliant</span>
                </div>
                <slot name="cta-after" />
            </div>
            {hasHeroIllustration && (
                <div class="hero-visual">
                    <slot name="hero-illustration">
                        {p.heroIllustration && (
                            <img 
                                src={`${import.meta.env.BASE_URL}${p.heroIllustration}`}
                                alt={p.heroIllustrationAlt || ''}
                                width={p.heroIllustrationWidth || 480}
                                height={p.heroIllustrationHeight || 360}
                                loading="eager"
                                style="display:block;max-width:100%;height:auto;border-radius:12px"
                            />
                        )}
                    </slot>
                </div>
            )}
        </section>
    </header>
    <nav class="studio-bar" aria-label="Product sections">
        <div class="container" style="display:flex;align-items:center;gap:12px;padding:10px 0">
            <div class="studio-brand">
                {p.productIcon && <span aria-hidden="true">{p.productIcon}</span>}
                <span class="h3" style="font-size:16px">{p.headline}</span>
            </div>
            <ul class="studio-tabs tabs-scroll" role="tablist">
                <li role="presentation"><a role="tab" href="#why">Why it wins</a></li>
                <li role="presentation"><a role="tab" href="#how">How it works</a></li>
                <li role="presentation"><a role="tab" href="#standards">Standards</a></li>
                <li role="presentation"><a role="tab" href="#examples">Examples</a></li>
                <li role="presentation"><a role="tab" href="#plans">Plans</a></li>
            </ul>
            <div class="studio-cta">
                {docsHref(p) && <a class="btn btn-ghost" href={docsHref(p)}>Docs</a>}
                {p.primaryCTA && <a class="btn btn-primary" href={p.primaryCTA.href}>Book demo</a>}
            </div>
        </div>
    </nav>
    <section id="why" class="container reveal-on-scroll" style="padding:8px 0 24px">
        {p.keyBenefits && p.keyBenefits.length > 0 && (
            <>
                <h2 class="section-title">Why it wins</h2>
                <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin-top:16px">
                    {p.keyBenefits.map((b, idx) => {
                        const defaultIconMap = [
                            'icon-gear-spin.png',
                            'icon-clipboard-path.png', 
                            'icon-rocket.png',
                            'icon-shield-aria.png',
                            'icon-receipt.png'
                        ];
                        const iconSrc = (p.benefitIcons && p.benefitIcons[idx]) || defaultIconMap[idx] || 'icon-gear-spin.png';
                        return (
                            <div class="panel-glow hover-rise" style="padding:24px;border:1px solid rgba(255,255,255,.08);position:relative;overflow:hidden">
                                {p.productKey && <div class={`product-rail rail--${p.productKey}`} aria-hidden="true" style="position:absolute;top:0;left:0;right:0;height:3px;margin:0"></div>}
                                <div style="display:flex;align-items:flex-start;gap:16px">
                                    <div style="flex-shrink:0;width:48px;height:48px;display:flex;align-items:center;justify-content:center;background:rgba(255,255,255,.05);border-radius:8px;border:1px solid rgba(255,255,255,.1)">
                                        <img src={`${import.meta.env.BASE_URL}images/icons/${iconSrc}`} alt="" style="width:32px;height:32px;opacity:0.9" aria-hidden="true" />
                                    </div>
                                    <div style="flex:1;min-width:0">
                                        <p style="margin:0;color:#e8ecff;font-size:16px;line-height:1.5;font-weight:500">{b}</p>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
                <div class="row-hairline"></div>
            </>
        )}
    </section>
    <section id="how" class="container" style="padding:8px 0 16px"><slot name="how" /></section>
    <section id="standards" class="container" style="padding:0 0 24px"><slot name="standards" /></section>
    <section id="examples" class="container" style="padding:0 0 24px"><slot name="examples" /></section>
    <section class="container" style="padding:0 0 24px">
        <div style="display:flex;gap:12px;flex-wrap:wrap">
            {p.primaryCTA && <a class="btn btn-primary" href={p.primaryCTA.href} aria-label={`Primary: ${p.primaryCTA.label}`} data-ev="cta_click" data-label={p.primaryCTA.label} data-position="mid_primary">See it live</a>}
            {p.secondaryCTA && <a class="btn btn-secondary" href={p.secondaryCTA.href} aria-label={`Secondary: ${p.secondaryCTA.label}`} data-ev="cta_click" data-label={p.secondaryCTA.label} data-position="mid_secondary">Read docs</a>}
        </div>
    </section>
    <section id="plans" class="container" style="padding:8px 0 24px">
        <h2 class="section-title">Plans</h2>
        <div style="display:flex;gap:10px;flex-wrap:wrap;margin-top:10px">
            <a class="btn btn-primary" href={`${import.meta.env.BASE_URL}demo/`}>Book demo</a>
            <a class="btn" style="border-color:var(--color-accent);color:var(--color-accent)" href={`${import.meta.env.BASE_URL}pricing/`}>See pricing</a>
            <a class="btn" href={`${import.meta.env.BASE_URL}contact/`}>Talk to us</a>
        </div>
    </section>
</div>
{p.proofTitle && <section class="container" style="padding:8px 0 8px"><h2 class="section-title">{p.proofTitle}</h2></section>}
<section class="container" style="padding:8px 0 24px"><slot name="proof" /></section>
<slot name="related" />

<!-- Read more band (curated) -->
<section class="container reveal-on-scroll" style="padding:16px 0 40px">
	<h2 class="section-title">Read more</h2>
	<div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:20px;margin-top:16px">
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">What is AuthZEN?</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">Understand decisions, constraints and obligations.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Read →</a>
		</div>
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Constraints & Obligations</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">How PDP returns enforceable constraints with decisions.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Read →</a>
		</div>
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Explainability</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">Expose why a decision happened for audits and UX.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Read →</a>
		</div>
		<div class="glass-card hover-rise" style="padding:20px">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Delegated Authorization</h3>
			<p style="margin:0 0 12px;color:#9ba3b7;line-height:1.6;font-size:14px">Model relationships and delegations for business context.</p>
			<a class="btn btn-ghost" href={`${import.meta.env.BASE_URL}solutions/delegated-authorization/`} style="font-size:14px">Explore →</a>
		</div>
	</div>
</section>

<!-- Next steps grid -->
<section class="container reveal-on-scroll" style="padding:24px 0 48px">
	<h2 class="section-title">What's next?</h2>
	<div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:20px;margin-top:16px">
		<div class="panel-glow hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Book a demo</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">See decisions and constraints live.</p>
			<a class="btn btn-primary" href={`${import.meta.env.BASE_URL}demo/`} style="font-size:14px">Book demo</a>
		</div>
		<div class="glass-card hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Talk to a specialist</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">Map decisions to your domain model.</p>
			<a class="btn btn-ghost" style="border:2px solid var(--color-accent);color:var(--color-accent);font-size:14px" href={`${import.meta.env.BASE_URL}contact/`}>Contact</a>
		</div>
		<div class="glass-card hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Read the docs</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">Dive into PDP API and examples.</p>
			<a class="btn btn-ghost" href="https://empowerid.github.io/empowernow_docs/docs/services/pdp/" target="_blank" rel="noopener" style="font-size:14px">Docs ↗</a>
		</div>
		<div class="glass-card hover-rise" style="padding:24px;text-align:center">
			<h3 style="margin:0 0 8px;color:#e8ecff;font-size:18px;font-weight:600">Explore standards</h3>
			<p style="margin:0 0 16px;color:#9ba3b7;line-height:1.6;font-size:14px">AuthZEN, OAuth, DPoP and more.</p>
			<a class="btn btn-ghost" href={`${import.meta.env.BASE_URL}resources/standards/`} style="font-size:14px">Standards →</a>
		</div>
	</div>
</section>
{(p.docsLinks && p.docsLinks.length) || (p.wwwLinks && p.wwwLinks.length) ? <CrossSiteLinks docsLinks={p.docsLinks} wwwLinks={p.wwwLinks} /> : null}
{relatedLinks.length > 0 && <RelatedContent internalLinks={relatedLinks} />}

<style>
	/* Hero layout styles */
	.hero-single {
		/* Default single-column layout (existing behavior) */
	}

	.hero-split {
		display: flex;
		gap: 48px;
		align-items: center;
		flex-wrap: wrap;
	}

	.hero-content {
		flex: 1 1 520px;
		min-width: 300px;
	}

	.hero-visual {
		flex: 1 1 400px;
		min-width: 280px;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	/* Mobile: stack vertically, illustration on top */
	@media (max-width: 768px) {
		.hero-split {
			flex-direction: column-reverse;
		}

		.hero-visual {
			width: 100%;
			max-width: 400px;
			margin: 0 auto 32px;
		}
	}

	/* Tablet: reduce gaps */
	@media (min-width: 769px) and (max-width: 1024px) {
		.hero-split {
			gap: 32px;
		}
	}
</style>

<script>
	// Reveal on scroll animation
	if ('IntersectionObserver' in window) {
		const revealElements = [...document.querySelectorAll('.reveal-on-scroll')];
		const revealObserver = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add('is-visible');
					revealObserver.unobserve(entry.target);
				}
			});
		}, { threshold: 0.25 });
		revealElements.forEach((el) => revealObserver.observe(el));
	}
</script>
