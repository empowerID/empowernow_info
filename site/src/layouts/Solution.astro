---
interface FAQ { q: string; a: string }
interface CTA { label: string; href: string }
interface Link { href: string; label: string }
interface Props {
	title: string;
	description: string;
	canonical: string;
	headline: string;
	outcomes?: string[];
	faq?: FAQ[];
	primaryCTA?: CTA;
	secondaryCTA?: CTA;
	docsLinks?: Link[];
	wwwLinks?: Link[];
	keywords?: string[];
}
const p = Astro.props as Props;
const faqJson = p.faq && p.faq.length ? {
	"@context": "https://schema.org",
	"@type": "FAQPage",
	mainEntity: p.faq.map(f => ({"@type":"Question", name: f.q, acceptedAnswer: {"@type":"Answer", text: f.a}}))
} : null;
import CrossSiteLinks from '../components/CrossSiteLinks.astro';
import RelatedContent from '../components/RelatedContent.astro';
import { relatedFor } from '../lib/keywords';
import BreadcrumbsJsonLd from '../components/BreadcrumbsJsonLd.astro';
const relatedLinks = Array.isArray(p.keywords) ? relatedFor(p.keywords) : [];
---
<BreadcrumbsJsonLd items={[
    { name: 'Home', item: new URL(import.meta.env.BASE_URL || '/', Astro.site).toString() },
    { name: 'Solutions', item: new URL(`${import.meta.env.BASE_URL}solutions/`, Astro.site).toString() },
    { name: p.headline, item: new URL(`${import.meta.env.BASE_URL}${String(p.canonical||'').replace(/^\//,'')}`, Astro.site).toString() },
]} />
{faqJson && <script type="application/ld+json">{JSON.stringify(faqJson)}</script>}
<header class="hero-plate page-stage" style={`padding:160px 0 64px;background-image:url(${import.meta.env.BASE_URL}images/backgrounds/bg-homepage-hero.jpg);background-size:cover;background-position:center;background-repeat:no-repeat`}>
    <section class="container" style="position:relative;z-index:1">
        <div class="eyebrow" style="font-size:14px;font-weight:700;letter-spacing:0.08em;text-transform:uppercase;color:rgba(0,231,246,0.85);margin:0 0 16px">ðŸ’¡ SOLUTION</div>
        <h1 class="display" style="margin:0 0 20px;font-size:clamp(2.5rem,5vw,4rem);line-height:1.1;font-weight:800">{p.headline}</h1>
        {p.outcomes && p.outcomes.length > 0 && (
            <div style="display:flex;gap:10px;flex-wrap:wrap;margin:0 0 32px">
                {p.outcomes.map((o) => <span class="chip chip--outline-cyan" style="padding:8px 16px;font-size:14px;font-weight:600">{o}</span>)}
            </div>
        )}
        <div style="display:flex;gap:16px;flex-wrap:wrap;align-items:center">
            {p.primaryCTA && <a class="btn btn-primary" href={p.primaryCTA.href} aria-label={`Primary: ${p.primaryCTA.label}`} data-ev="cta_click" data-label={p.primaryCTA.label} data-position="hero_primary" style="padding:14px 32px;font-size:16px;font-weight:700">{p.primaryCTA.label}</a>}
            {p.secondaryCTA && <a class="btn btn-secondary" href={p.secondaryCTA.href} aria-label={`Secondary: ${p.secondaryCTA.label}`} data-ev="cta_click" data-label={p.secondaryCTA.label} data-position="hero_secondary" style="padding:14px 32px;font-size:16px;font-weight:600">{p.secondaryCTA.label}</a>}
            <span class="chip chip--success" style="padding:8px 16px;font-size:14px;font-weight:600">AA compliant</span>
        </div>
    </section>
</header>
<slot name="how" />
<slot name="standards" />
<slot name="related" />
{(p.docsLinks && p.docsLinks.length) || (p.wwwLinks && p.wwwLinks.length) ? <CrossSiteLinks docsLinks={p.docsLinks} wwwLinks={p.wwwLinks} /> : null}
{relatedLinks.length > 0 && <RelatedContent internalLinks={relatedLinks} />}
