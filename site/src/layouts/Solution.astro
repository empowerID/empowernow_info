---
interface FAQ { q: string; a: string }
interface CTA { label: string; href: string }
interface Link { href: string; label: string }
interface Props {
	title: string;
	description: string;
	canonical: string;
	headline: string;
	outcomes?: string[];
	faq?: FAQ[];
	primaryCTA?: CTA;
	secondaryCTA?: CTA;
	docsLinks?: Link[];
	wwwLinks?: Link[];
	keywords?: string[];
	/** optional custom background image path (relative to BASE_URL) */
	heroBackground?: string;
	/** optional illustration image for right side of hero (relative to BASE_URL) */
	heroIllustration?: string;
	/** alt text for hero illustration */
	heroIllustrationAlt?: string;
	/** optional illustration width for sizing (default: 480) */
	heroIllustrationWidth?: number;
	/** optional illustration height for sizing (default: 360) */
	heroIllustrationHeight?: number;
}
const p = Astro.props as Props;
const faqJson = p.faq && p.faq.length ? {
	"@context": "https://schema.org",
	"@type": "FAQPage",
	mainEntity: p.faq.map(f => ({"@type":"Question", name: f.q, acceptedAnswer: {"@type":"Answer", text: f.a}}))
} : null;
import CrossSiteLinks from '../components/CrossSiteLinks.astro';
import RelatedContent from '../components/RelatedContent.astro';
import { relatedFor } from '../lib/keywords';
import BreadcrumbsJsonLd from '../components/BreadcrumbsJsonLd.astro';
const relatedLinks = Array.isArray(p.keywords) ? relatedFor(p.keywords) : [];

// Hero illustration support
const hasHeroIllustration = !!(p.heroIllustration || Astro.slots.has('hero-illustration'));
const heroLayoutClass = hasHeroIllustration ? 'hero-split' : 'hero-single';
const heroBackgroundUrl = p.heroBackground
	? `${import.meta.env.BASE_URL}${p.heroBackground}`
	: `${import.meta.env.BASE_URL}images/backgrounds/bg-homepage-hero.jpg`;
---
<BreadcrumbsJsonLd items={[
    { name: 'Home', item: new URL(import.meta.env.BASE_URL || '/', Astro.site).toString() },
    { name: 'Solutions', item: new URL(`${import.meta.env.BASE_URL}solutions/`, Astro.site).toString() },
    { name: p.headline, item: new URL(`${import.meta.env.BASE_URL}${String(p.canonical||'').replace(/^\//,'')}`, Astro.site).toString() },
]} />
{faqJson && <script type="application/ld+json">{JSON.stringify(faqJson)}</script>}
<header class="hero-plate page-stage" style={`padding:160px 0 64px;background-image:url(${heroBackgroundUrl});background-size:cover;background-position:center;background-repeat:no-repeat`}>
    <section class={`container ${heroLayoutClass}`} style="position:relative;z-index:1">
        <div class="hero-content">
            <div class="eyebrow" style="font-size:14px;font-weight:700;letter-spacing:0.08em;text-transform:uppercase;color:rgba(0,231,246,0.85);margin:0 0 16px">SOLUTION</div>
            <h1 class="display" style="margin:0 0 20px;font-size:clamp(2.5rem,5vw,4rem);line-height:1.1;font-weight:800">{p.headline}</h1>
            {p.outcomes && p.outcomes.length > 0 && (
                <div style="display:flex;gap:10px;flex-wrap:wrap;margin:0 0 32px">
                    {p.outcomes.map((o) => <span class="chip chip--outline-cyan" style="padding:8px 16px;font-size:14px;font-weight:600">{o}</span>)}
                </div>
            )}
            <div style="display:flex;gap:16px;flex-wrap:wrap;align-items:center">
                {p.primaryCTA && <a class="btn btn-primary" href={p.primaryCTA.href} aria-label={`Primary: ${p.primaryCTA.label}`} data-ev="cta_click" data-label={p.primaryCTA.label} data-position="hero_primary" style="padding:14px 32px;font-size:16px;font-weight:700">{p.primaryCTA.label}</a>}
                {p.secondaryCTA && <a class="btn btn-secondary" href={p.secondaryCTA.href} aria-label={`Secondary: ${p.secondaryCTA.label}`} data-ev="cta_click" data-label={p.secondaryCTA.label} data-position="hero_secondary" style="padding:14px 32px;font-size:16px;font-weight:600">{p.secondaryCTA.label}</a>}
                <div class="footer-icon-tooltip" style="position:relative;display:inline-block">
                    <img src={`${import.meta.env.BASE_URL}images/icons/icon-aa.png`} alt="AA compliant" style="width:32px;height:32px;cursor:help;transition:transform 0.2s ease" onmouseover="this.style.transform='scale(1.1)'" onmouseout="this.style.transform='scale(1)'" />
                    <span class="tooltip-text" style="visibility:hidden;background-color:rgba(0,0,0,.9);color:#00E7F6;text-align:center;border-radius:6px;padding:6px 12px;position:absolute;z-index:1;bottom:125%;left:50%;margin-left:-50px;opacity:0;transition:opacity 0.2s;font-size:13px;white-space:nowrap;border:1px solid rgba(0,231,246,0.3)">AA compliant</span>
                </div>
            </div>
        </div>
        {hasHeroIllustration && (
            <div class="hero-visual">
                <slot name="hero-illustration">
                    {p.heroIllustration && (
                        <img
                            src={`${import.meta.env.BASE_URL}${p.heroIllustration}`}
                            alt={p.heroIllustrationAlt || ''}
                            width={p.heroIllustrationWidth || 800}
                            height={p.heroIllustrationHeight || 600}
                            loading="eager"
                            style="display:block;max-width:100%;height:auto;border-radius:12px"
                        />
                    )}
                </slot>
            </div>
        )}
    </section>
</header>
<slot name="how" />
<slot name="standards" />
<slot name="related" />
{(p.docsLinks && p.docsLinks.length) || (p.wwwLinks && p.wwwLinks.length) ? <CrossSiteLinks docsLinks={p.docsLinks} wwwLinks={p.wwwLinks} /> : null}
{relatedLinks.length > 0 && <RelatedContent internalLinks={relatedLinks} />}

<style>
	/* Hero layout styles */
	.hero-single {
		/* Default single-column layout */
	}

	.hero-split {
		display: flex;
		gap: 48px;
		align-items: center;
		flex-wrap: wrap;
	}

	.hero-content {
		flex: 1 1 520px;
		min-width: 300px;
	}

	.hero-visual {
		flex: 1 1 400px;
		min-width: 280px;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	/* Mobile: stack vertically, illustration on top */
	@media (max-width: 768px) {
		.hero-split {
			flex-direction: column-reverse;
		}

		.hero-visual {
			width: 100%;
			max-width: 400px;
			margin: 0 auto 32px;
		}
	}

	/* Tablet: reduce gaps */
	@media (min-width: 769px) and (max-width: 1024px) {
		.hero-split {
			gap: 32px;
		}
	}

	/* Tooltip styles - ensure they work in hero context */
	.footer-icon-tooltip:hover .tooltip-text {
		visibility: visible !important;
		opacity: 1 !important;
	}
</style>
