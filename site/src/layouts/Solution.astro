---
interface FAQ { q: string; a: string }
interface CTA { label: string; href: string }
interface Link { href: string; label: string }
interface Props {
	title: string;
	description: string;
	canonical: string;
	headline: string;
	outcomes?: string[];
	faq?: FAQ[];
	primaryCTA?: CTA;
	secondaryCTA?: CTA;
	docsLinks?: Link[];
	wwwLinks?: Link[];
	keywords?: string[];
	/** optional custom background image path (relative to BASE_URL) */
	heroBackground?: string;
	/** optional illustration image for right side of hero (relative to BASE_URL) */
	heroIllustration?: string;
	/** alt text for hero illustration */
	heroIllustrationAlt?: string;
	/** optional illustration width for sizing (default: 480) */
	heroIllustrationWidth?: number;
	/** optional illustration height for sizing (default: 360) */
	heroIllustrationHeight?: number;
}
const p = Astro.props as Props;
const faqJson = p.faq && p.faq.length ? {
	"@context": "https://schema.org",
	"@type": "FAQPage",
	mainEntity: p.faq.map(f => ({"@type":"Question", name: f.q, acceptedAnswer: {"@type":"Answer", text: f.a}}))
} : null;
import CrossSiteLinks from '../components/CrossSiteLinks.astro';
import RelatedContent from '../components/RelatedContent.astro';
import Hero from '../components/Hero.astro';
import MediaVideo from '../components/MediaVideo.astro';
import { relatedFor } from '../lib/keywords';
import BreadcrumbsJsonLd from '../components/BreadcrumbsJsonLd.astro';
const relatedLinks = Array.isArray(p.keywords) ? relatedFor(p.keywords) : [];
const base = import.meta.env.BASE_URL;
---
<BreadcrumbsJsonLd items={[
    { name: 'Home', item: new URL(import.meta.env.BASE_URL || '/', Astro.site).toString() },
    { name: 'Solutions', item: new URL(`${import.meta.env.BASE_URL}solutions/`, Astro.site).toString() },
    { name: p.headline, item: new URL(`${import.meta.env.BASE_URL}${String(p.canonical||'').replace(/^\//,'')}`, Astro.site).toString() },
]} />
{faqJson && <script type="application/ld+json">{JSON.stringify(faqJson)}</script>}
<Hero
    layout="split"
    background={p.heroBackground}
    eyebrow="SOLUTION"
    headline={p.headline}
    illustration={p.heroIllustration}
    illustrationAlt={p.heroIllustrationAlt}
    illustrationWidth={p.heroIllustrationWidth || 800}
    illustrationHeight={p.heroIllustrationHeight || 600}
    primaryCTA={p.primaryCTA}
    secondaryCTA={p.secondaryCTA}
    chips={p.outcomes}
    chipStyle="outline-cyan"
/>
<slot name="how" />
<slot name="standards" />
<slot name="related" />
{(p.docsLinks && p.docsLinks.length) || (p.wwwLinks && p.wwwLinks.length) ? <CrossSiteLinks docsLinks={p.docsLinks} wwwLinks={p.wwwLinks} /> : null}
{relatedLinks.length > 0 && <RelatedContent internalLinks={relatedLinks} />}

<!-- Hidden video for lightbox -->
<div style="position:fixed;left:-9999px;top:-9999px;width:1px;height:1px;overflow:hidden;pointer-events:none" id="demo-video-wrapper">
	<MediaVideo 
		src={{mp4:`${base}videos/homepage/The_AI_Gold_Rush.mp4`}}
		poster={`${base}images/video-placeholder/hero-video-placeholder.jpg`}
		title="The AI Gold Rush: EmpowerNow 90-second demo"
		mode="modal"
		autoPlay={true}
		muted={false}
		aspect="16/9"
	/>
</div>
<script>
	// Add ID to video trigger button for CTA access
	(function() {
		const wrapper = document.getElementById('demo-video-wrapper');
		if (wrapper) {
			const videoBtn = wrapper.querySelector('.mv-defer');
			if (videoBtn) {
				videoBtn.id = 'demo-video-trigger';
			}
		}
	})();
</script>

<style>
	/* Hero layout styles now in custom-styles.css (unified hero system) */
</style>
