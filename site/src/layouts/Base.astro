---
const { title = 'EmpowerNow', description = 'Identity & Authorization Fabric', canonical = '/', ogImage, hreflangs } = Astro.props as any;
import '../styles/tokens.css';
import '../styles/utilities.css';
---
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{title}</title>
		<meta name="description" content={description} />
        <link rel="canonical" href={new URL(`${import.meta.env.BASE_URL}${String(canonical||'').replace(/^\//,'')}`, Astro.site)} />
		<meta name="theme-color" content="#0B1C3D" />
		<meta property="og:type" content="website" />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
        <meta property="og:url" content={new URL(`${import.meta.env.BASE_URL}${String(canonical||'').replace(/^\//,'')}`, Astro.site)} />
		{(ogImage
			? <meta property="og:image" content={ogImage} />
			: <meta property="og:image" content={new URL(`${import.meta.env.BASE_URL}images/en-logo-dark.png`, Astro.site)} />)}
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		{(ogImage
			? <meta name="twitter:image" content={ogImage} />
			: <meta name="twitter:image" content={new URL(`${import.meta.env.BASE_URL}images/en-logo-dark.png`, Astro.site)} />)}
		{hreflangs && hreflangs.map((h: { href: string; lang: string }) => <link rel="alternate" hrefLang={h.lang} href={h.href} />)}
		<link rel="icon" href={`${import.meta.env.BASE_URL}favicon.svg`} />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
		<link rel="preload" as="image" href={`${import.meta.env.BASE_URL}images/en-logo-dark.png`} fetchpriority="high" />
		<style>
			html,body{margin:0;background:var(--navy);color:#fff;font-family:Inter,-apple-system,sans-serif}
			main{min-height:60vh}
			footer{border-top:1px solid rgba(255,255,255,.1);padding:32px 0;margin-top:48px}
			nav{position:sticky;top:0;z-index:1000}
			.consent{position:fixed;bottom:16px;left:16px;right:16px;z-index:1100}
			.sr-only-focusable{position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden}
			/* Global link styles: avoid purple visited, underline only on hover */
			a{color:var(--on-bg);text-decoration:none}
			a:hover{color:var(--color-accent);text-decoration:underline}
			a:visited{color:var(--on-bg)}
		</style>
	</head>
    <body>
		<a href="#main" class="sr-only-focusable">Skip to content</a>
        <nav aria-label="Primary navigation">
			<div class="container wrap" style="display:flex;justify-content:space-between;align-items:center;padding:16px 0">
				<a href={import.meta.env.BASE_URL} style="display:inline-flex;align-items:center;gap:8px;text-decoration:none">
					<img src={`${import.meta.env.BASE_URL}images/en-logo-dark.png`} alt="EmpowerNow" width="140" height="28" decoding="async" fetchpriority="high" style="height:28px;width:auto" />
				</a>
				<ul class="nav-links">
					<li><a href={`${import.meta.env.BASE_URL}products/`}>Products</a></li>
					<li><a href={`${import.meta.env.BASE_URL}solutions/`}>Solutions</a></li>
					<li><a href={`${import.meta.env.BASE_URL}resources/`}>Resources</a></li>
					<li><a href="https://empowerid.github.io/empowernow_docs/" target="_blank" rel="noopener">Docs</a></li>
					<li><a href={`${import.meta.env.BASE_URL}pricing/`}>Pricing</a></li>
					<li><a href={`${import.meta.env.BASE_URL}trust/`}>Company</a></li>
                    <li><a class="btn btn-primary" href={`${import.meta.env.BASE_URL}demo/`} data-ev="cta_click" data-label="nav_demo" data-cta-level="hard" data-product="na" data-persona="na" data-stage="na">Book Demo</a></li>
				</ul>
			</div>
		</nav>
        <main id="main">
			<slot />
		</main>
        <footer class="site-footer">
            <div class="container footer-top">
                <div class="footer-brand">
                    <img src={`${import.meta.env.BASE_URL}images/en-logo-dark.png`} alt="EmpowerNow" style="height:24px;max-width:240px;width:auto;image-rendering:auto" />
                    <div style="color:#9ba3b7;max-width:340px">Identity & Authorization Fabric for people, services, and AI agents.</div>
                    <div class="footer-trust">
                        <span class="chip chip--success">AA compliant</span>
                        <span class="chip chip--outline-cyan">Receipts</span>
                    </div>
                </div>
                <div class="footer-col"><h4>Product</h4><ul>
                    <li><a href={`${import.meta.env.BASE_URL}products/idp/`}>IdP</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}products/pdp/`}>PDP</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}products/gateway/`}>ARIA MCP Gateway</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}products/aria-shield/`}>ARIA Shield</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}products/crud/`}>CRUD Service</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}products/data-collector/`}>Data Collector</a></li>
                    <li><span style="color:#9ba3b7">VDS (Coming soon)</span></li>
                </ul></div>
                <div class="footer-col"><h4>Solutions</h4><ul>
                    <li><a href={`${import.meta.env.BASE_URL}solutions/zero-token-spas/`}>Zero‑token SPAs</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}solutions/agent-safe-tools/`}>Agent‑safe tools</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}solutions/delegated-authorization/`}>Delegated auth</a></li>
                </ul></div>
                <div class="footer-col"><h4>Resources</h4><ul>
                    <li><a href={`${import.meta.env.BASE_URL}resources/`}>Overview</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}resources/standards/`}>Standards</a></li>
                    <li><a href="https://empowerid.github.io/empowernow_docs/" target="_blank" rel="noopener">Docs ↗</a></li>
                </ul></div>
                <div class="footer-col"><h4>Company</h4><ul>
                    <li><a href={`${import.meta.env.BASE_URL}company/`}>About</a></li>
                    <li><a href={`${import.meta.env.BASE_URL}contact/`}>Contact</a></li>
                    <li><a href="https://github.com/empowerID/empowernow_info/blob/main/site/AUTHORING.md" target="_blank" rel="noopener">Authoring guide ↗</a></li>
                </ul></div>
            </div>
            <div class="container footer-bottom">
                <div>© {new Date().getFullYear()} EmpowerNow</div>
                <div style="display:flex;gap:12px">
                    <a class="btn" style="border-color:var(--color-accent);color:var(--color-accent)" href={`${import.meta.env.BASE_URL}demo/`}>Book demo</a>
                    <a class="btn" href={`${import.meta.env.BASE_URL}resources/standards/`}>Explore standards</a>
                </div>
            </div>
        </footer>
		<div id="consent" class="consent" hidden>
			<div class="glass-card" style="padding:12px;display:flex;justify-content:space-between;align-items:center;gap:12px">
				<div style="color:#9ba3b7">We use analytics to improve your experience.</div>
				<div style="display:flex;gap:8px">
					<button id="consent-accept" class="btn btn-primary">Allow</button>
					<button id="consent-decline" class="btn">Decline</button>
				</div>
			</div>
		</div>
		<script>
			(function(){
				try{
					const consentKey = 'analytics_consent';
					const consentEl = document.getElementById('consent');
					const acceptBtn = document.getElementById('consent-accept');
					const declineBtn = document.getElementById('consent-decline');
					const has = localStorage.getItem(consentKey);
					if(!has && consentEl){ consentEl.hidden = false; }
					function setConsent(val){ localStorage.setItem(consentKey, val); if(consentEl) consentEl.hidden = true; }
					acceptBtn && acceptBtn.addEventListener('click', function(){ setConsent('yes'); });
					declineBtn && declineBtn.addEventListener('click', function(){ setConsent('no'); });
                    document.addEventListener('click', function(e){
						const t = e.target as HTMLElement;
						const el = t && (t.closest('[data-ev]') as HTMLElement | null);
						if(!el) return;
						if(localStorage.getItem(consentKey) !== 'yes') return;
                        const type = el.getAttribute('data-ev') || 'event';
                        const label = el.getAttribute('data-label') || '';
                        const position = el.getAttribute('data-position') || '';
                        const cta_level = el.getAttribute('data-cta-level') || 'soft';
                        const product = el.getAttribute('data-product') || 'na';
                        const persona = el.getAttribute('data-persona') || 'na';
                        const stage = el.getAttribute('data-stage') || 'na';
                        const url = new URL(location.href);
                        const utm_campaign = url.searchParams.get('utm_campaign') || '';
                        const utm_persona = url.searchParams.get('utm_persona') || '';
                        const utm_stage = url.searchParams.get('utm_stage') || '';
                        const record = {
                            timestamp: new Date().toISOString(),
                            event: type,
                            cta_level,
                            page: location.pathname,
                            product,
                            persona,
                            stage,
                            utm_campaign,
                            utm_persona,
                            utm_stage,
                            metadata: { label, position }
                        };
                        (window as any).dataLayer = (window as any).dataLayer || [];
                        (window as any).dataLayer.push(record);
                        try {
                            const key = 'marketing_events_jsonl';
                            const prev = localStorage.getItem(key) || '';
                            const line = JSON.stringify(record);
                            localStorage.setItem(key, prev ? (prev + '\n' + line) : line);
                        } catch {}
					});
				}catch{}
			})();
		</script>
        <script>
            (function(){
                try{
                    (window as any).metrics = (window as any).metrics || {};
                    (window as any).metrics.exportJSONL = function(){
                        try{
                            const key = 'marketing_events_jsonl';
                            const blob = new Blob([localStorage.getItem(key) || ''], { type: 'application/jsonl' });
                            const a = document.createElement('a');
                            a.href = URL.createObjectURL(blob);
                            a.download = 'events.jsonl';
                            document.body.appendChild(a); a.click(); document.body.removeChild(a);
                        }catch{}
                    };
                }catch{}
            })();
        </script>
		<script>
			(function(){
				try{
					// Mark current nav link for a11y
					const navLinks = document.querySelectorAll('nav .nav-links a[href^="/"]');
					navLinks.forEach((a)=>{
						try{
							const url = new URL((a as HTMLAnchorElement).href, location.origin);
							if(url.pathname === location.pathname){ (a as HTMLElement).setAttribute('aria-current','page'); }
						}catch{}
					});
					const run = () => {
						const UTM = new URLSearchParams({ utm_source:'www', utm_medium:'cta', utm_campaign: (document.querySelector('[data-position]')?.getAttribute('data-position') || 'site') });
						function appendUtm(a){
							try{
								const href = a.getAttribute('href');
								if(!href || href.startsWith('mailto:') || href.startsWith('tel:')) return;
								const url = new URL(href, location.origin);
								if(url.origin !== location.origin) return; // keep internal only
								const q = new URLSearchParams(url.search);
								UTM.forEach((v,k)=>{ if(!q.has(k)) q.set(k,v); });
								url.search = q.toString();
								a.setAttribute('href', url.pathname + (url.search ? ('?' + url.search) : '') + (url.hash||''));
							}catch{}
						}
						document.querySelectorAll('a[data-ev]')?.forEach(appendUtm);
					};
					if('requestIdleCallback' in window){ (window as any).requestIdleCallback(run); } else { setTimeout(run, 0); }
				}catch{}
			})();
		</script>
	</body>
</html>
